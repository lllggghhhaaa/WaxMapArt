// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using WaxMapArt.Web.Database;

#nullable disable

namespace WaxMapArt.Web.Migrations
{
    [DbContext(typeof(DatabaseContext))]
    partial class DatabaseContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "10.0.0-preview.7.25380.108")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "hstore");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BlockPalette", b =>
                {
                    b.Property<Guid>("BlocksId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("PalettesId")
                        .HasColumnType("uuid");

                    b.HasKey("BlocksId", "PalettesId");

                    b.HasIndex("PalettesId");

                    b.ToTable("PaletteBlocks", (string)null);
                });

            modelBuilder.Entity("WaxMapArt.Web.Database.Block", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<int>("MapId")
                        .HasColumnType("integer");

                    b.Property<string>("MinecraftId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<bool>("NeedSupport")
                        .HasColumnType("boolean");

                    b.Property<Dictionary<string, string>>("Properties")
                        .IsRequired()
                        .HasColumnType("hstore");

                    b.HasKey("Id");

                    b.HasIndex("MinecraftId")
                        .IsUnique();

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("WaxMapArt.Web.Database.Palette", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("PlaceholderBlockId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("PlaceholderBlockId");

                    b.HasIndex("UserId");

                    b.ToTable("Palettes");
                });

            modelBuilder.Entity("WaxMapArt.Web.Database.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BlockPalette", b =>
                {
                    b.HasOne("WaxMapArt.Web.Database.Block", null)
                        .WithMany()
                        .HasForeignKey("BlocksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("WaxMapArt.Web.Database.Palette", null)
                        .WithMany()
                        .HasForeignKey("PalettesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WaxMapArt.Web.Database.Palette", b =>
                {
                    b.HasOne("WaxMapArt.Web.Database.Block", "PlaceholderBlock")
                        .WithMany()
                        .HasForeignKey("PlaceholderBlockId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("WaxMapArt.Web.Database.User", "User")
                        .WithMany("Palettes")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PlaceholderBlock");

                    b.Navigation("User");
                });

            modelBuilder.Entity("WaxMapArt.Web.Database.User", b =>
                {
                    b.Navigation("Palettes");
                });
#pragma warning restore 612, 618
        }
    }
}
