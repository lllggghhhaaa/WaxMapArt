@page "/blocks"
@rendermode InteractiveServer
@using WaxMapArt.Utils
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using WaxMapArt.Web.Entities
@using WaxMapArt.Web.Services
@inject AuthService Auth
@inject NavigationManager NavigationManager
@inject IDbContextFactory<DatabaseContext> DbContextFactory
@inject IJSRuntime JS

<div class="flex flex-col">
    <div class="-m-1.5 overflow-x-auto">
        <div class="p-1.5 min-w-full inline-block align-middle">
            <div class="border border-gray-200 rounded-lg overflow-hidden dark:border-neutral-700">
                <table id="reference" class="min-w-full divide-y divide-gray-200 dark:divide-neutral-700">
                    <thead>
                    <tr>
                        <th scope="col" class="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase dark:text-neutral-500">Color</th>
                        <th scope="col" class="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase dark:text-neutral-500">Name</th>
                        <th scope="col" class="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase dark:text-neutral-500">Id</th>
                        <th scope="col" class="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase dark:text-neutral-500">Properties</th>
                        <AuthorizeView Roles="Developer">
                            <th scope="col" class="px-6 py-3 text-end text-xs font-medium text-gray-500 uppercase dark:text-neutral-500">Actions</th>
                        </AuthorizeView>
                    </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200 dark:divide-neutral-700">
                    @if (_blocks is null)
                    {
                        <tr>
                            <td colspan="5" class="px-6 py-4 whitespace-nowrap text-sm text-center text-gray-500 dark:text-neutral-400">
                                Loading blocks...
                            </td>
                        </tr>
                    } 
                    else if (_blocks.Count == 0)
                    {
                        <tr>
                            <td colspan="5" class="px-6 py-4 whitespace-nowrap text-sm text-center text-gray-500 dark:text-neutral-400">
                                No blocks found.
                            </td>
                        </tr>
                    }
                    else
                    {
                        @foreach (var block in _blocks)
                        {
                            <tr>
                                <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-800 dark:text-neutral-200">
                                    <div class="flex items-center justify-center">
                                        @{
                                            var color = ColorUtils.MapIdToInfo(block.MapId).Color.ToHexColor();

                                            <svg class="w-5 h-5 rounded-full" xmlns="http://www.w3.org/2000/svg"
                                                 viewBox="0 0 20 20" title="@color">
                                                <circle cx="10" cy="10" r="9" fill="@color"/>
                                            </svg>
                                        }
                                        <span class="ml-2">@block.MapId</span>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-neutral-400 relative">
                                    <div class="flex items-center space-x-2">
                                        <span>@block.Name</span>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-neutral-400 relative">
                                    <div class="flex items-center space-x-2">
                                        <img src="@block.ImageUrl" alt="@block.MinecraftId"
                                             class="w-10 h-10 object-cover rounded-md border border-gray-300"/>
                                        <span>@block.MinecraftId</span>
                                    </div>
                                </td>
                                <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-neutral-400 relative">
                                    <div class="flex items-center space-x-2">
                                        @foreach (var prop in block.Properties)
                                        {
                                            <div class="text-sm text-gray-700">@prop.Key: @prop.Value</div>
                                        }
                                    </div>
                                </td>
                                <AuthorizeView Roles="Developer">
                                    <td class="px-6 py-4 whitespace-nowrap text-end text-sm font-medium">
                                        <button @onclick="() => TogglePopover(block.Id)"
                                                @ref="@_buttonRefs[block.Id]"
                                                type="button"
                                                class="inline-flex items-center gap-x-1.5 text-sm font-medium text-gray-700 hover:text-gray-900 dark:text-neutral-300 dark:hover:text-white transition-colors duration-150">
                                            <span>Actions</span>
                                            <i class="ri-arrow-up-s-line text-gray-500 dark:text-neutral-400 transition-transform duration-150 @(_openPopovers.Contains(block.Id) ? "rotate-90" : "")"></i>
                                        </button>
                                    </td>
                                </AuthorizeView>
                            </tr>
                        }
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <AuthorizeView Roles="Developer">
        <div class="mt-4 flex justify-end">
            <button @onclick="NavigateToAddBlock" type="button" class="py-2 px-3 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 focus:outline-hidden focus:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none">
                Add Block
            </button>
        </div>
    </AuthorizeView>
</div>

@if (_openPopovers.Any())
{
    <div class="fixed inset-0 z-10" @onclick="CloseAllPopovers"></div>
    
    @foreach (var blockId in _openPopovers.ToList())
    {
        <div class="fixed z-20 w-56" style="@_popoverPositions.GetValueOrDefault(blockId, "top:0;left:0;")">
            <div class="divide-y divide-gray-100 rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none dark:bg-neutral-800 dark:divide-neutral-700 dark:ring-neutral-600">
                <div class="py-1">
                    <button @onclick="() => NavigateToEdit(blockId)" 
                            type="button"
                            class="group flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:text-neutral-300 dark:hover:bg-neutral-700 dark:hover:text-white">
                        <i class="ri-edit-2-line"></i>
                        <span class="ml-2">Edit</span>
                    </button>
                    <button @onclick="() => ConfirmDeleteBlock(blockId)" 
                            type="button"
                            class="group flex items-center w-full px-4 py-2 text-sm text-red-700 hover:bg-red-50 hover:text-red-900 dark:text-red-400 dark:hover:bg-red-900/20 dark:hover:text-red-300">
                        <i class="ri-delete-bin-2-line"></i>
                        <span class="ml-2">Delete</span>
                    </button>
                </div>
            </div>
        </div>
    }
}

@if (_showDeleteConfirm && _blockToDelete != Guid.Empty)
{
    <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 flex items-center justify-center">
        <div class="relative mx-auto p-5 border w-96 shadow-lg rounded-md bg-white dark:bg-neutral-800 dark:border-neutral-600">
            <div class="mt-3 text-center">
                <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 dark:bg-red-900/20">
                    <svg class="h-6 w-6 text-red-600 dark:text-red-400" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" />
                    </svg>
                </div>
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mt-4">Delete Palette</h3>
                <div class="mt-2 px-7 py-3">
                    <p class="text-sm text-gray-500 dark:text-neutral-400">
                        Are you sure you want to delete this palette?
                    </p>
                </div>
                <div class="items-center px-4 py-3 space-x-2">
                    <button @onclick="CancelDelete" 
                            type="button"
                            class="px-4 py-2 bg-gray-500 text-white text-base font-medium rounded-md w-24 hover:bg-gray-600 dark:bg-neutral-600 dark:hover:bg-neutral-500">
                        Cancel
                    </button>
                    <button @onclick="() => DeleteBlock(_blockToDelete)" 
                            type="button"
                            class="px-4 py-2 bg-red-500 text-white text-base font-medium rounded-md w-24 hover:bg-red-600 ml-2">
                        Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Block>? _blocks;
    
    private IJSObjectReference? _module;
    private readonly HashSet<Guid> _openPopovers = [];
    private bool _showDeleteConfirm;
    private Guid _blockToDelete = Guid.Empty;
    private readonly Dictionary<Guid, ElementReference> _buttonRefs = new();
    private readonly Dictionary<Guid, string> _popoverPositions = new();

    protected override async Task OnInitializedAsync()
    {
        var database = await DbContextFactory.CreateDbContextAsync();

        var user = Auth.GetCurrentUser();
        if (user is null) 
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        _blocks = await database.Blocks
            .OrderBy(block => block.MapId)
            .ToListAsync();
    }

    private void NavigateToEdit(Guid blockId)
    {
        NavigationManager.NavigateTo($"/blocks/{blockId}");
    }

    private void NavigateToAddBlock()
    {
        NavigationManager.NavigateTo("/blocks/new");
    }

    private void CloseAllPopovers()
    {
        _openPopovers.Clear();
    }

    private async Task TogglePopover(Guid paletteId)
    {
        if (_openPopovers.Contains(paletteId))
        {
            _openPopovers.Remove(paletteId);
        }
        else
        {
            _openPopovers.Clear();
            _openPopovers.Add(paletteId);

            if (_buttonRefs.TryGetValue(paletteId, out var buttonRef))
            {
                try
                {
                    var rect = await JS.InvokeAsync<DomRect>("getBoundingClientRect", buttonRef);
                    double top = (int)(rect.Top + rect.Height + 10);
                    double left = (int)(rect.Left + rect.Width - 224);

                    _popoverPositions[paletteId] = $"top: {top}px; left: {left}px;";
                }
                catch
                {
                    _popoverPositions[paletteId] = "top: 0; left: 0;";
                }
            }
        }
        
        await InvokeAsync(StateHasChanged);
    }

    private void ConfirmDeleteBlock(Guid paletteId)
    {
        _openPopovers.Clear();
        _blockToDelete = paletteId;
        _showDeleteConfirm = true;
    }

    private void CancelDelete()
    {
        _showDeleteConfirm = false;
        _blockToDelete = Guid.Empty;
    }

    private async Task DeleteBlock(Guid blockId)
    {
        _showDeleteConfirm = false;

        var user = Auth.GetCurrentUser();
        if (user is null || user.Role != UserRole.Developer) return;
        
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        var block = await dbContext.Blocks.FindAsync(blockId);
        
        if (block is not null)
        {
            dbContext.Blocks.Remove(block);
            await dbContext.SaveChangesAsync();
            _blocks?.RemoveAll(b => b.Id == blockId);
        }
        
        _blockToDelete = Guid.Empty;
    }
}