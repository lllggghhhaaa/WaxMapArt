@page "/palettes"
@attribute [Authorize]
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using WaxMapArt.Web.Services
@inject AuthService Auth
@inject IDbContextFactory<DatabaseContext> DbContextFactory
@inject NavigationManager NavigationManager
@inject IJSRuntime JS

<div class="flex flex-col">
    <div class="-m-1.5 overflow-x-auto">
        <div class="p-1.5 min-w-full inline-block align-middle">
            <div class="border border-gray-200 rounded-lg overflow-hidden dark:border-neutral-700">
                <table class="min-w-full divide-y divide-gray-200 dark:divide-neutral-700">
                    <thead>
                    <tr>
                        <th scope="col" class="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase dark:text-neutral-500">Name</th>
                        <th scope="col" class="px-6 py-3 text-start text-xs font-medium text-gray-500 uppercase dark:text-neutral-500">Blocks</th>
                        <th scope="col" class="px-6 py-3 text-end text-xs font-medium text-gray-500 uppercase dark:text-neutral-500">Actions</th>
                    </tr>
                    </thead>
                    <tbody class="divide-y divide-gray-200 dark:divide-neutral-700">
                    @foreach (var palette in _palettes)
                    {
                        <tr>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-800 dark:text-neutral-200">@palette.Name</td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500 dark:text-neutral-400 relative">
                                <div @ref="_scrollContainer"
                                     @onwheel="OnScroll"
                                     @onscroll="OnScroll"
                                     class="flex flex-row gap-x-1 w-full overflow-x-auto relative
            [&::-webkit-scrollbar]:h-2
            [&::-webkit-scrollbar-track]:bg-gray-100
            [&::-webkit-scrollbar-thumb]:bg-gray-300
            dark:[&::-webkit-scrollbar-track]:bg-neutral-700
            dark:[&::-webkit-scrollbar-thumb]:bg-neutral-500 @_scrollClass">
        
                                    @foreach (var block in palette.Blocks)
                                    {
                                        <div class="rounded-md border border-gray-600 p-0.5 dark:border-neutral-500">
                                            <img src="@block.ImageUrl" alt="@block.MinecraftId" title="@block.MinecraftId"
                                                 class="w-10 h-10 object-cover flex-shrink-0" />
                                        </div>
                                    }
                                </div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-end text-sm font-medium">
                                <button @onclick="() => TogglePopover(palette.Id)" 
                                        @ref="@_buttonRefs[palette.Id]"
                                        type="button" 
                                        class="inline-flex items-center gap-x-1.5 text-sm font-medium text-gray-700 hover:text-gray-900 dark:text-neutral-300 dark:hover:text-white transition-colors duration-150">
                                    <span>Actions</span>
                                    <i class="ri-arrow-up-s-line text-gray-500 dark:text-neutral-400 transition-transform duration-150 @(_openPopovers.Contains(palette.Id) ? "rotate-90" : "")"></i>
                                </button>
                            </td>
                        </tr>
                    }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
    <div class="mt-4 flex justify-end">
        <button @onclick="NavigateToAddPalette" type="button" class="py-2 px-3 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 focus:outline-hidden focus:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none">
            Add Palette
        </button>
    </div>
</div>

@if (_openPopovers.Any())
{
    <div class="fixed inset-0 z-10" @onclick="CloseAllPopovers"></div>
    
    @foreach (var paletteId in _openPopovers.ToList())
    {
        <div class="fixed z-20 w-56" style="@(GetPopoverStyle(paletteId))">
            <div class="divide-y divide-gray-100 rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none dark:bg-neutral-800 dark:divide-neutral-700 dark:ring-neutral-600">
                <div class="py-1">
                    <button @onclick="() => EditPalette(paletteId)" 
                            type="button"
                            class="group flex items-center w-full px-4 py-2 text-sm text-gray-700 hover:bg-gray-100 hover:text-gray-900 dark:text-neutral-300 dark:hover:bg-neutral-700 dark:hover:text-white">
                        <i class="ri-edit-2-line"></i>
                        <span class="ml-2">Edit</span>
                    </button>
                    <button @onclick="() => ConfirmDeletePalette(paletteId)" 
                            type="button"
                            class="group flex items-center w-full px-4 py-2 text-sm text-red-700 hover:bg-red-50 hover:text-red-900 dark:text-red-400 dark:hover:bg-red-900/20 dark:hover:text-red-300">
                        <i class="ri-delete-bin-2-line"></i>
                        <span class="ml-2">Delete</span>
                    </button>
                </div>
            </div>
        </div>
    }
}

@if (_showDeleteConfirm && _paletteToDelete != Guid.Empty)
{
    <div class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50 flex items-center justify-center">
        <div class="relative mx-auto p-5 border w-96 shadow-lg rounded-md bg-white dark:bg-neutral-800 dark:border-neutral-600">
            <div class="mt-3 text-center">
                <div class="mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-red-100 dark:bg-red-900/20">
                    <svg class="h-6 w-6 text-red-600 dark:text-red-400" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" d="M12 9v3.75m-9.303 3.376c-.866 1.5.217 3.374 1.948 3.374h14.71c1.73 0 2.813-1.874 1.948-3.374L13.949 3.378c-.866-1.5-3.032-1.5-3.898 0L2.697 16.126zM12 15.75h.007v.008H12v-.008z" />
                    </svg>
                </div>
                <h3 class="text-lg font-medium text-gray-900 dark:text-white mt-4">Delete Palette</h3>
                <div class="mt-2 px-7 py-3">
                    <p class="text-sm text-gray-500 dark:text-neutral-400">
                        Are you sure you want to delete this palette?
                    </p>
                </div>
                <div class="items-center px-4 py-3 space-x-2">
                    <button @onclick="CancelDelete" 
                            type="button"
                            class="px-4 py-2 bg-gray-500 text-white text-base font-medium rounded-md w-24 hover:bg-gray-600 dark:bg-neutral-600 dark:hover:bg-neutral-500">
                        Cancel
                    </button>
                    <button @onclick="() => DeletePalette(_paletteToDelete)" 
                            type="button"
                            class="px-4 py-2 bg-red-500 text-white text-base font-medium rounded-md w-24 hover:bg-red-600 ml-2">
                        Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    private List<Palette> _palettes = [];
    private ElementReference _scrollContainer;
    private string _scrollClass = "";
    private IJSObjectReference? _module;
    private readonly HashSet<Guid> _openPopovers = [];
    private bool _showDeleteConfirm;
    private Guid _paletteToDelete = Guid.Empty;
    private readonly Dictionary<Guid, ElementReference> _buttonRefs = new();
    private bool _isDev;

    protected override async Task OnInitializedAsync()
    {
        var database = await DbContextFactory.CreateDbContextAsync();

        var user = Auth.GetCurrentUser();
        if (user is null)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }
    
        _palettes = await database.Palettes.Where(palette => palette.UserId == user.Id).Include(palette => palette.Blocks).ToListAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _module = await JS.InvokeAsync<IJSObjectReference>("import",
                "./Components/Pages/Palettes.razor.js");

            await UpdateMask();
        }
    }
    
    private async Task OnScroll()
    {
        await UpdateMask();
    }

    private async Task UpdateMask()
    {
        if (_module is null) return;

        var position = await _module.InvokeAsync<string>("getScrollPosition", _scrollContainer);
        
        _scrollClass = position switch
        {
            "none" => "",
            "left" => "[mask-image:linear-gradient(to_right,transparent_0,black_30px,black_100%)]",
            "right" => "[mask-image:linear-gradient(to_right,black_30px,black_calc(100%-30px),transparent_100%)]",
            "both" => "[mask-image:linear-gradient(to_right,transparent_0,black_30px,black_calc(100%-30px),transparent_100%)]",
            _ => ""
        };

        StateHasChanged();
    }

    private ElementReference GetButtonRef(Guid paletteId)
    {
        _buttonRefs.TryGetValue(paletteId, out var buttonRef);
        return buttonRef;
    }

    private string GetPopoverStyle(Guid paletteId) => GetPopoverStyleAsync(paletteId).Result;

    private async Task<string> GetPopoverStyleAsync(Guid paletteId)
    {
        if (!_buttonRefs.TryGetValue(paletteId, out var buttonRef))
            return "top: 0; left: 0;";

        try
        {
            var rect = await JS.InvokeAsync<dynamic>("getBoundingClientRect", buttonRef);
            var top = rect.bottom + 8;
            var left = rect.right - 224;
            
            return $"top: {top}px; left: {left}px;";
        }
        catch
        {
            return "top: 0; left: 0;";
        }
    }

    private void CloseAllPopovers()
    {
        _openPopovers.Clear();
    }

    private async Task TogglePopover(Guid paletteId)
    {
        if (_openPopovers.Contains(paletteId))
        {
            _openPopovers.Remove(paletteId);
        }
        else
        {
            _openPopovers.Clear();
            _openPopovers.Add(paletteId);
        }
        
        await InvokeAsync(StateHasChanged);
    }

    private void EditPalette(Guid paletteId)
    {
        _openPopovers.Clear();
        NavigationManager.NavigateTo($"/palette/{paletteId}");
    }

    private void ConfirmDeletePalette(Guid paletteId)
    {
        _openPopovers.Clear();
        _paletteToDelete = paletteId;
        _showDeleteConfirm = true;
    }

    private void CancelDelete()
    {
        _showDeleteConfirm = false;
        _paletteToDelete = Guid.Empty;
    }

    private async Task DeletePalette(Guid paletteId)
    {
        _showDeleteConfirm = false;

        if (!_isDev) return;
        
        await using var dbContext = await DbContextFactory.CreateDbContextAsync();
        var palette = await dbContext.Palettes.FindAsync(paletteId);
        
        if (palette is not null)
        {
            dbContext.Palettes.Remove(palette);
            await dbContext.SaveChangesAsync();
            _palettes.Remove(palette);
        }
        
        _paletteToDelete = Guid.Empty;
    }

    private void NavigateToAddPalette()
    {
        NavigationManager.NavigateTo("/palette");
    }
}