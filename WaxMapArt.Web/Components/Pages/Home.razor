@page "/"
@rendermode InteractiveServer
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.PixelFormats
@using SixLabors.ImageSharp.Processing
@using WaxMapArt.Comparison
@using WaxMapArt.Dithering
@using WaxMapArt.Exporter
@using WaxMapArt.Generator
@using WaxMapArt.Web.Components.Components
@inject NavigationManager NavigationManager
@inject IDbContextFactory<DatabaseContext> DbContextFactory
@inject AuthenticationStateProvider AuthenticationStateProvider

<PageTitle>Home</PageTitle>

@if (_palettes is null)
{
    <p>Faça login para continuar</p>
}
else
{
    <EditForm Model="_formModel" OnValidSubmit="OnValidSubmit" class="flex flex-col items-center space-y-4">
        <PrelineFileUpload
            @ref="_imageUpload"
            OnFilesSelected="FileUploaded"
            ShowProgressBar="true"
            MaxFileSize="Int64.MaxValue" />
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8 w-full md:w-3/4 lg:w-1/2">
            <PrelineSelect TValue="DitheringMode"
                           @bind-SelectedValue="_formModel.DitheringMode"
                           Placeholder="Select Dithering Mode"
                           SelectOptions="@(SelectOption.FromEnum<DitheringMode>())" />
            <PrelineSelect TValue="GeneratorType"
                           @bind-SelectedValue="_formModel.GeneratorType"
                           Placeholder="Select Generator Type"
                           SelectOptions="@(SelectOption.FromEnum<GeneratorType>())" />
            <PrelineSelect TValue="ComparisonMode"
                           @bind-SelectedValue="_formModel.ComparisonMode"
                           Placeholder="Select Comparison Mode"
                           SelectOptions="@(SelectOption.FromEnum<ComparisonMode>())" />
            <PrelineSelect TValue="Palette"
                           @bind-SelectedValue="_formModel.SelectedPalette"
                           Placeholder="Select Palette"
                           SelectOptions="@(_palettes.Select(palette => new SelectOption<Palette>{ Text = palette.Name.Trim().ToLower(), Value = palette }).ToList())" />
            <PrelineSelect TValue="IExporter"
                           @bind-SelectedValue="_formModel.Exporter"
                           Placeholder="Exporter"
                           SelectOptions="@(new List<SelectOption<IExporter>>{ new() { Text = "Vanilla", Value = new VanillaExporter() }, new() { Text = "Litematica", Value = new LitematicaExporter() }})"></PrelineSelect>
        </div>
        
        <PrelineNavCard Class="w-full md:w-3/4 lg:w-1/2 dark:bg-neutral-800">
            <PrelineNavCardTab Title="Size">
                <div class="flex flex-col space-y-4">
                    <div class="flex flex-row space-x-4">
                        <PrelineInputNumber TValue="int"
                                            @bind-Value="_formModel.WidthMultiplier"
                                            Variant="InputNumberVariant.Horizontal"
                                            Min="1"
                                            Max="16"
                                            Step="1"
                                            AriaLabel="Width">
                            <Label>Largura</Label>
                        </PrelineInputNumber>
                        <PrelineInputNumber TValue="int"
                                            @bind-Value="_formModel.HeightMultiplier"
                                            Variant="InputNumberVariant.Horizontal"
                                            Min="1"
                                            Max="16"
                                            Step="1"
                                            AriaLabel="Height">
                            <Label>Altura</Label>
                        </PrelineInputNumber>
                    </div>

                    <PrelineSelect TValue="ResizeMethod"
                                   @bind-SelectedValue="_formModel.ResizeMethod"
                                   Placeholder="Select resize method"
                                   SelectOptions="@(SelectOption.FromEnum<ResizeMethod>())"/>

                    @switch (_formModel.ResizeMethod)
                    {
                        case ResizeMethod.Crop:
                            <PrelineInputNumber TValue="int"
                                                @bind-Value="_formModel.CropOffsetX"
                                                Variant="InputNumberVariant.Horizontal"
                                                Step="1">
                                <Label>Deslocamento X do Corte</Label>
                            </PrelineInputNumber>
                            <PrelineInputNumber TValue="int"
                                                @bind-Value="_formModel.CropOffsetY"
                                                Variant="InputNumberVariant.Horizontal"
                                                Step="1">
                                <Label>Deslocamento Y do Corte</Label>
                            </PrelineInputNumber>
                            break;
                        case ResizeMethod.Pad:
                            <PrelineInputText @bind-Value="_formModel.PadColor"
                                              Placeholder="Cor de Preenchimento">
                                <Label>Cor de Preenchimento</Label>
                            </PrelineInputText>
                            break;
                    }
                </div>
            </PrelineNavCardTab>
            <PrelineNavCardTab Title="Pre-Processing">
                <div class="flex flex-col gap-4">
                    <PrelineInputNumber TValue="float"
                                        @bind-Value="_formModel.Saturation"
                                        Variant="InputNumberVariant.Horizontal"
                                        Min="0.0f"
                                        Max="2.0f"
                                        Step="0.1f">
                        <Label>Saturação</Label>
                    </PrelineInputNumber>
                    <PrelineInputNumber TValue="float"
                                        @bind-Value="_formModel.Brightness"
                                        Variant="InputNumberVariant.Horizontal"
                                        Min="0.0f"
                                        Max="2.0f"
                                        Step="0.1f">
                        <Label>Brilho</Label>
                    </PrelineInputNumber>
                    <PrelineInputNumber TValue="float"
                                        @bind-Value="_formModel.Contrast"
                                        Variant="InputNumberVariant.Horizontal"
                                        Min="0.0f"
                                        Max="2.0f"
                                        Step="0.1f">
                        <Label>Contraste</Label>
                    </PrelineInputNumber>
                </div>
            </PrelineNavCardTab>
        </PrelineNavCard>
        
        <ValidationSummary />
        
        @if (_originalImageUrl is not null)
        {
            <div class="w-full md:w-3/4 lg:w-1/2 flex flex-col space-y-4">
                <div class="flex flex-row space-x-4">
                    <div class="relative w-full overflow-hidden">
                        <img src="@_originalImageUrl"
                             class="w-full h-full object-cover"
                             alt="Imagem Original"/>
                        <PrelineBadge Variant="PrelineBadgeVariant.Soft" Color="gray-800" BackgroundColor="gray-100" Class="absolute top-4 right-4 z-10">Original</PrelineBadge>
                    </div>
                    
                    @if (_preProcessedImageUrl is not null)
                    {
                        <div class="relative w-full overflow-hidden">
                            <img src="@_preProcessedImageUrl"
                                 class="w-full h-full object-cover"
                                 alt="Imagem Pré-processada"/>
                            <PrelineBadge Variant="PrelineBadgeVariant.Soft" Color="blue-600" BackgroundColor="blue-100" Class="absolute top-4 right-4 z-10 dark:bg-blue-800/30 dark:text-blue-400">Pre-Processed</PrelineBadge>
                        </div>
                    }
                </div>
                
                @if (_generatedImageUrl is not null)
                {
                    <div class="flex justify-center">
                        <div class="relative w-1/2 overflow-hidden">
                            <img src="@_generatedImageUrl"
                                 class="w-full h-full object-cover"
                                 alt="Imagem Gerada"/>
                            <PrelineBadge Variant="PrelineBadgeVariant.Soft" Color="teal-500" BackgroundColor="teal-100" Class="absolute top-4 right-4 z-10 dark:bg-teal-800/30 dark:text-teal-500">Gerada</PrelineBadge>
                        </div>
                    </div>
                }
            </div>
        }

        <div class="flex space-x-4">
            <button type="submit" class="px-4 py-2 bg-green-600 text-white rounded" @onclick="() => _generate = false">Gerar Preview</button>
            <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded" @onclick="() => _generate = true">Gerar Mapa</button>
        </div>
    </EditForm>
    
    @if (_exportUrl != null)
    {
        <a id="exportMap" class="btn" href="@_exportUrl" download="map.litematic"
           role="button" target="=_top">Download</a>
    }
}

@code {
    private DatabaseContext? _database;
    PrelineFileUpload _imageUpload = null!;

    private string? _originalImageUrl;
    private string? _preProcessedImageUrl;
    private string? _generatedImageUrl;
    private string? _exportUrl;
    private Image<Rgb24>? _inputImage;

    private List<Palette>? _palettes;
    private readonly FormModel _formModel = new();
    private bool _generate;

    protected override async Task OnInitializedAsync()
    {
        _database = await DbContextFactory.CreateDbContextAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated != true)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var userId = Guid.Parse(authState.User.FindFirstValue(ClaimTypes.NameIdentifier) ?? string.Empty);
        if (userId == Guid.Empty)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        _palettes = await _database.Palettes
            .Include(p => p.Blocks)
            .Include(p => p.PlaceholderBlock)
            .Where(p => p.UserId == userId)
            .ToListAsync();

        _formModel.SetPreProcessingChangeCallback(OnPreProcessingChange);
    }

    private async Task CreateOriginalPreviewAsync()
    {
        if (_inputImage is null) return;

        var image = _inputImage.Clone();
        var targetWidth = _formModel.WidthMultiplier * 128;
        var targetHeight = _formModel.HeightMultiplier * 128;
        
        image.Mutate(x => x.Resize(targetWidth, targetHeight, KnownResamplers.Lanczos3));
        
        var originalImageStream = new MemoryStream();
        await image.SaveAsPngAsync(originalImageStream);
        _originalImageUrl = ConvertStreamToBase64Url(originalImageStream.ToArray());
    }

    private async Task<Image<Rgb24>?> ProcessImageAsync()
    {
        if (_inputImage is null) return null;

        var image = _inputImage.Clone();

        if (Math.Abs(_formModel.Saturation - 1.0f) > float.Epsilon
            || Math.Abs(_formModel.Brightness - 1.0f) > float.Epsilon
            || Math.Abs(_formModel.Contrast - 1.0f) > float.Epsilon)
        {
            image.Mutate(x => x
                .Saturate(_formModel.Saturation)
                .Brightness(_formModel.Brightness)
                .Contrast(_formModel.Contrast));
        }

        var targetWidth = _formModel.WidthMultiplier * 128;
        var targetHeight = _formModel.HeightMultiplier * 128;
        
        var resizeMode = _formModel.ResizeMethod switch 
        {
            ResizeMethod.Stretch => ResizeMode.Stretch,
            ResizeMethod.Pad => ResizeMode.Pad,
            ResizeMethod.Crop => ResizeMode.Crop,
            ResizeMethod.Min => ResizeMode.Min,
            ResizeMethod.Max => ResizeMode.Max,
            _ => throw new ArgumentOutOfRangeException()
        };

        var resizeOptions = new ResizeOptions
        {
            Size = new Size(targetWidth, targetHeight),
            Mode = resizeMode
        };

        switch (_formModel.ResizeMethod)
        {
            case ResizeMethod.Crop:
                var sourceAspect = (float)image.Width / image.Height;
                var targetAspect = (float)targetWidth / targetHeight;

                int cropWidth, cropHeight, cropX, cropY;

                if (sourceAspect > targetAspect)
                {
                    cropHeight = image.Height;
                    cropWidth = (int)(image.Height * targetAspect);
                    cropX = (image.Width - cropWidth) / 2 + _formModel.CropOffsetX;
                    cropY = _formModel.CropOffsetY;
                }
                else
                {
                    cropWidth = image.Width;
                    cropHeight = (int)(image.Width / targetAspect);
                    cropX = _formModel.CropOffsetX;
                    cropY = (image.Height - cropHeight) / 2 + _formModel.CropOffsetY;
                }

                cropX = Math.Max(0, Math.Min(cropX, image.Width - cropWidth));
                cropY = Math.Max(0, Math.Min(cropY, image.Height - cropHeight));

                var cropRect = new Rectangle(cropX, cropY, cropWidth, cropHeight);
                image.Mutate(x => x.Crop(cropRect));
                image.Mutate(x => x.Resize(targetWidth, targetHeight));
                break;

            case ResizeMethod.Pad:
                var padColor = Color.ParseHex(_formModel.PadColor);
                resizeOptions.PadColor = padColor;
                image.Mutate(x => x.Resize(resizeOptions));
                break;

            default:
                image.Mutate(x => x.Resize(resizeOptions));
                break;
        }

        var processedImageStream = new MemoryStream();
        await image.SaveAsPngAsync(processedImageStream);
        _preProcessedImageUrl = ConvertStreamToBase64Url(processedImageStream.ToArray());

        return image;
    }

    private async Task OnPreProcessingChange()
    {
        if (_inputImage is not null)
        {
            await ProcessImageAsync();
            StateHasChanged();
        }
    }

    private async Task OnValidSubmit()
    {
        if (_inputImage is null) return;
        
        IColorComparison colorComparison = _formModel.ComparisonMode switch
        {
            ComparisonMode.Rgb => new RgbColorComparison(),
            ComparisonMode.Cie76 => new Cie76ColorComparison(),
            ComparisonMode.CieDe2000 => new CieDe2000ColorComparison(),
            _ => throw new ArgumentOutOfRangeException()
        };

        IDithering dithering = _formModel.DitheringMode switch
        {
            DitheringMode.None => new NoneDithering(),
            DitheringMode.Atkinson => new AtkinsonDithering(),
            DitheringMode.FloydSteinberg => new FloydSteinbergDithering(),
            _ => throw new ArgumentOutOfRangeException()
        };

        var palette = _formModel.SelectedPalette;
        if (palette is null) return;
        
        var processedImage = await ProcessImageAsync();
        if (processedImage is null) return;
        
        var ms = new MemoryStream();
        var generatedImage = dithering.ApplyDithering(processedImage, palette, colorComparison, _formModel.GeneratorType == GeneratorType.Staircase);
        await generatedImage.SaveAsPngAsync(ms);
        _generatedImageUrl = ConvertStreamToBase64Url(ms.ToArray());
        
        if (!_generate) return;

        IGenerator generator = _formModel.GeneratorType switch
        {
            GeneratorType.Flat => new FlatGenerator(),
            GeneratorType.Staircase => new StaircaseGenerator(),
            _ => throw new ArgumentOutOfRangeException()
        };
        var generatorOutput = generator.Generate(generatedImage, palette);

        var outStream = _formModel.Exporter.SaveAsStream(palette, generatorOutput.Blocks);
        var outMs = new MemoryStream();
        await outStream.CopyToAsync(outMs);

        _exportUrl = ConvertStreamToBase64Url(outMs.ToArray(), "application/octet-stream");
    }

    private static string ConvertStreamToBase64Url(byte[] data, string contentType = "image/png") => $"data:{contentType};base64,{Convert.ToBase64String(data)}";

    private class FormModel
    {
        private float _saturation = 1.0f;
        private float _brightness = 1.0f;
        private float _contrast = 1.0f;
        private Func<Task>? _preProcessingChangeCallback;

        public DitheringMode DitheringMode { get; set; }
        public ComparisonMode ComparisonMode { get; set; }
        public GeneratorType GeneratorType { get; set; }
        public Palette? SelectedPalette { get; set; }
        public IExporter Exporter { get; set; }
        public int WidthMultiplier { get; set; } = 1;
        public int HeightMultiplier { get; set; } = 1;
        public ResizeMethod ResizeMethod { get; set; } = ResizeMethod.Crop;
        public int CropOffsetX { get; set; }
        public int CropOffsetY { get; set; }
        public string PadColor { get; set; } = "#FFFFFF";

        public float Saturation 
        { 
            get => _saturation; 
            set
            {
                if (Math.Abs(_saturation - value) < float.Epsilon) return;
                _saturation = value;
                _preProcessingChangeCallback?.Invoke();
            } 
        }

        public float Brightness 
        { 
            get => _brightness; 
            set
            {
                if (Math.Abs(_brightness - value) < float.Epsilon) return;
                _brightness = value;
                _preProcessingChangeCallback?.Invoke();
            } 
        }

        public float Contrast 
        { 
            get => _contrast; 
            set
            {
                if (Math.Abs(_contrast - value) < float.Epsilon) return;
                _contrast = value;
                _preProcessingChangeCallback?.Invoke();
            } 
        }

        public void SetPreProcessingChangeCallback(Func<Task> callback)
        {
            _preProcessingChangeCallback = callback;
        }
    }
    
    private enum GeneratorType
    {
        Flat,
        Staircase
    }

    private enum ResizeMethod
    {
        Stretch,
        Pad,
        Crop,
        Min,
        Max
    }

    private async void FileUploaded(IBrowserFile[] obj)
    {
        var file = obj.FirstOrDefault();
        if (file is null) return;
        
        await using var ms = new MemoryStream();
        var stream = file.OpenReadStream(_imageUpload.MaxFileSize);
        var buffer = new byte[4096];
        int bytesRead;
        long totalRead = 0;

        while ((bytesRead = await stream.ReadAsync(buffer)) > 0)
        {
            await ms.WriteAsync(buffer.AsMemory(0, bytesRead));
            totalRead += bytesRead;
            var percentComplete = (int)((float)totalRead / stream.Length * 100);
            _imageUpload.SetFileProgress(_imageUpload.GetSelectedFiles().First(), percentComplete);
        }

        var data = ms.ToArray();
        _inputImage = Image.Load<Rgb24>(data);
        
        await CreateOriginalPreviewAsync();
        
        await ProcessImageAsync();
        
        StateHasChanged();
    }
}