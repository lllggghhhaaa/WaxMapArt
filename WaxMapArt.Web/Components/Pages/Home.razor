@page "/"
@rendermode InteractiveServer
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.PixelFormats
@using WaxMapArt.Comparison
@using WaxMapArt.Dithering
@inject IDbContextFactory<DatabaseContext> DbContextFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject UserManager<ApplicationUser> UserManager

<PageTitle>Home</PageTitle>

@if (_palettes is null)
{
    <p>Loading...</p>
}
else
{
    <EditForm Model="_formModel" OnValidSubmit="OnValidSubmit" class="flex flex-col items-center space-y-4">
        <InputFile OnChange="LoadFiles" class="border p-2" />

        <ValidationSummary />

        <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700">Dithering</label>
            <InputSelect @bind-Value="_formModel.DitheringMode" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 p-2">
                @foreach (var ditheringMode in Enum.GetValues<DitheringMode>())
                {
                    <option value="@ditheringMode">@Enum.GetName(ditheringMode)</option>
                }
            </InputSelect>
        </div>

        <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700">Algoritmo</label>
            <InputSelect @bind-Value="_formModel.ComparisonMode" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 p-2">
                @foreach (var algorithm in Enum.GetValues<ComparisonMode>())
                {
                    <option value="@algorithm">@Enum.GetName(algorithm)</option>
                }
            </InputSelect>
        </div>

        <div class="mb-4">
            <label class="block text-sm font-medium text-gray-700">Palete</label>
            <InputSelect @bind-Value="_formModel.SelectedPaletteId" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 p-2">
                @foreach (var palette in _palettes)
                {
                    <option value="@palette.Id">@palette.Name</option>
                }
            </InputSelect>
        </div>

        @if (_inputImageUrl is not null)
        {
            <div class="flex space-x-4">
                <div>
                    <h2 class="text-lg font-semibold">Imagem Original</h2>
                    <img src="@_inputImageUrl" class="border mt-2 max-w-xs" alt="Input Image"/>
                </div>

                <div>
                    <h2 class="text-lg font-semibold">Imagem Gerada</h2>
                    @if (_generatedImageUrl is not null)
                    {
                        <img src="@_generatedImageUrl" class="border mt-2 max-w-xs" alt="Output Image"/>
                    }
                </div>
            </div>
        }

        <button type="submit" class="px-4 py-2 bg-green-600 text-white rounded">Gerar Preview</button>
    </EditForm>
}

@code {
    private string? _inputImageUrl;
    private string? _generatedImageUrl;
    private Image<Rgb24>? _inputImage;

    private List<Palette>? _palettes;

    private readonly FormModel _formModel = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = await UserManager.GetUserAsync(authState.User);

        if (user is null) return;

        var dbContext = await DbContextFactory.CreateDbContextAsync();
        _palettes = await dbContext.Palettes.Where(p => p.UserId == user.Id)
            .Include(palette => palette.Blocks)
            .Include(palette => palette.PlaceholderBlock).ToListAsync();
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        await using var ms = new MemoryStream();
        await e.File.OpenReadStream().CopyToAsync(ms);
        var data = ms.ToArray();

        _inputImageUrl = ConvertStreamToBase64Url(data);
        _inputImage = Image.Load<Rgb24>(data);
    }

    private async Task OnValidSubmit()
    {
        if (_inputImage is null) return;

        IColorComparison colorComparison = _formModel.ComparisonMode switch
        {
            ComparisonMode.Rgb => new RgbColorComparison(),
            ComparisonMode.Cie76 => new Cie76ColorComparison(),
            ComparisonMode.CieDe2000 => new CieDe2000ColorComparison(),
            _ => throw new ArgumentOutOfRangeException()
        };

        IDithering dithering = _formModel.DitheringMode switch
        {
            DitheringMode.Atkinson => new AtkinsonDithering(),
            DitheringMode.FloydSteinberg => new FloydSteinbergDithering(),
            _ => throw new ArgumentOutOfRangeException()
        };

        var palette = _palettes!.Find(p => p.Id == _formModel.SelectedPaletteId);
        if (palette is null) return;
        
        var ms = new MemoryStream();
        var generatedImage = dithering.ApplyDithering(_inputImage, palette, colorComparison);
        await generatedImage.SaveAsPngAsync(ms);
        _generatedImageUrl = ConvertStreamToBase64Url(ms.ToArray());
    }

    private static string ConvertStreamToBase64Url(byte[] data) => $"data:image/png;base64,{Convert.ToBase64String(data)}";

    private class FormModel
    {
        public DitheringMode DitheringMode { get; set; }
        public ComparisonMode ComparisonMode { get; set; }
        public Guid SelectedPaletteId { get; set; }
    }
}