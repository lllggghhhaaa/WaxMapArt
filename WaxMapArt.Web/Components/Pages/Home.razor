@page "/"
@rendermode InteractiveServer
@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.EntityFrameworkCore
@using SkiaSharp
@using WaxMapArt.Comparison
@using WaxMapArt.Dithering
@using WaxMapArt.Entities
@using WaxMapArt.Exporter
@using WaxMapArt.Processing
@using WaxMapArt.Web.Components.Components
@using WaxMapArt.Web.Services
@using Palette = WaxMapArt.Web.Database.Palette
@inject NavigationManager NavigationManager
@inject IDbContextFactory<DatabaseContext> DbContextFactory
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject MapGeneratorService Generator

<PageTitle>WaxMapArt - Generator</PageTitle>

@if (_palettes is null)
{
    <p>Login to continue</p>
}
else
{
    <EditForm Model="_formModel" OnValidSubmit="OnValidSubmit" class="flex flex-col items-center space-y-4">
        <PrelineFileUpload
            @ref="_imageUpload"
            OnFilesSelected="FileUploaded"
            ShowProgressBar="true"
            MaxFileSize="Int64.MaxValue" />
        
        <div class="grid grid-cols-1 md:grid-cols-2 gap-8 w-full md:w-3/4 lg:w-1/2">
            <PrelineSelect TValue="DitheringMode"
                           @bind-SelectedValue="_formModel.DitheringMode"
                           Placeholder="Select Dithering Mode"
                           SelectOptions="@(SelectOption.FromEnum<DitheringMode>())" />
            <PrelineSelect TValue="GeneratorType"
                           @bind-SelectedValue="_formModel.GeneratorType"
                           Placeholder="Select Generator Type"
                           SelectOptions="@(SelectOption.FromEnum<GeneratorType>())" />
            <PrelineSelect TValue="ComparisonMode"
                           @bind-SelectedValue="_formModel.ComparisonMode"
                           Placeholder="Select Comparison Mode"
                           SelectOptions="@(SelectOption.FromEnum<ComparisonMode>())" />
            <PrelineSelect TValue="Palette"
                           @bind-SelectedValue="_formModel.SelectedPalette"
                           Placeholder="Select Palette"
                           SelectOptions="@(_palettes.Select(palette => new SelectOption<Palette>{ Text = palette.Name.Trim().ToLower(), Value = palette }).ToList())" />
            <PrelineSelect TValue="IExporter"
                           @bind-SelectedValue="_formModel.Exporter"
                           Placeholder="Exporter"
                           SelectOptions="_exportOptions" />
        </div>
        
        <PrelineNavCard Class="w-full md:w-3/4 lg:w-1/2 dark:bg-neutral-800">
            <PrelineNavCardTab Title="Size">
                <div class="flex flex-col space-y-4">
                    <div class="flex flex-row space-x-4">
                        <PrelineInputNumber TValue="int"
                                            @bind-Value="_formModel.WidthMultiplier"
                                            Variant="InputNumberVariant.Horizontal"
                                            Min="1"
                                            Max="16"
                                            Step="1"
                                            AriaLabel="Width">
                            <Label>Width</Label>
                        </PrelineInputNumber>
                        <PrelineInputNumber TValue="int"
                                            @bind-Value="_formModel.HeightMultiplier"
                                            Variant="InputNumberVariant.Horizontal"
                                            Min="1"
                                            Max="16"
                                            Step="1"
                                            AriaLabel="Height">
                            <Label>Height</Label>
                        </PrelineInputNumber>
                    </div>

                    <PrelineSelect TValue="ResizeMethod"
                                   @bind-SelectedValue="_formModel.ResizeMethod"
                                   Placeholder="Select resize method"
                                   SelectOptions="@(SelectOption.FromEnum<ResizeMethod>())"/>

                    @switch (_formModel.ResizeMethod)
                    {
                        case ResizeMethod.Crop:
                            <PrelineInputNumber TValue="int"
                                                @bind-Value="_formModel.CropOffsetX"
                                                Variant="InputNumberVariant.Horizontal"
                                                Step="1">
                                <Label>Cut X Offset</Label>
                            </PrelineInputNumber>
                            <PrelineInputNumber TValue="int"
                                                @bind-Value="_formModel.CropOffsetY"
                                                Variant="InputNumberVariant.Horizontal"
                                                Step="1">
                                <Label>Cut Y Offset</Label>
                            </PrelineInputNumber>
                            break;
                        case ResizeMethod.Pad:
                            <PrelineInputText @bind-Value="_formModel.PadColor"
                                              Placeholder="FillColor">
                                <Label>Fill Color</Label>
                            </PrelineInputText>
                            break;
                    }
                </div>
            </PrelineNavCardTab>
            <PrelineNavCardTab Title="Dithering">
                <div class="flex flex-col space-x-4">
                    @switch (_formModel.DitheringMode)
                    {
                        case DitheringMode.Atkinson:
                        case DitheringMode.FloydSteinberg:
                        case DitheringMode.JarvisJudiceNinke:
                            <div class="flex flex-row space-x-4">
                                <PrelineInputNumber TValue="float"
                                                    @bind-Value="_formModel.ErrorDiffusionStrength"
                                                    Variant="InputNumberVariant.Horizontal"
                                                    Step="0.05f">
                                    <Label>Error Diffusion Strength</Label>
                                </PrelineInputNumber>
                                <PrelineSwitch @bind-Value="_formModel.SerpentineScanning"
                                               Label="Serpentine Scanning" />
                            </div>
                            break;
                        case DitheringMode.None:
                        default:
                            <div class="bg-gray-50 border border-gray-200 text-sm text-gray-600 rounded-lg p-4 dark:bg-white/10 dark:border-white/10 dark:text-neutral-400" role="alert">
                                <div class="flex">
                                    <div class="shrink-0">
                                        <svg class="shrink-0 size-4 mt-0.5" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                            <circle cx="12" cy="12" r="10"></circle>
                                            <path d="M12 16v-4"></path>
                                            <path d="M12 8h.01"></path>
                                        </svg>
                                    </div>
                                    <div class="flex-1 md:flex md:justify-between ms-2">
                                        <p class="text-sm">
                                            This dithering doesn't have any configuration options.
                                        </p>
                                    </div>
                                </div>
                            </div>
                            break;
                    }
                </div>
            </PrelineNavCardTab>
            <PrelineNavCardTab Title="Pre-Processing">
                <div class="flex flex-col gap-4">
                    <PrelineInputNumber TValue="float"
                                        @bind-Value="_formModel.Saturation"
                                        Variant="InputNumberVariant.Horizontal"
                                        Min="0.0f"
                                        Max="2.0f"
                                        Step="0.05f">
                        <Label>Saturation</Label>
                    </PrelineInputNumber>
                    <PrelineInputNumber TValue="float"
                                        @bind-Value="_formModel.Brightness"
                                        Variant="InputNumberVariant.Horizontal"
                                        Min="0.0f"
                                        Max="2.0f"
                                        Step="0.05f">
                        <Label>Brightness</Label>
                    </PrelineInputNumber>
                    <PrelineInputNumber TValue="float"
                                        @bind-Value="_formModel.Contrast"
                                        Variant="InputNumberVariant.Horizontal"
                                        Min="0.0f"
                                        Max="2.0f"
                                        Step="0.05f">
                        <Label>Contrast</Label>
                    </PrelineInputNumber>
                    <PrelineInputNumber TValue="float"
                                        @bind-Value="_formModel.BlurRadius"
                                        Variant="InputNumberVariant.Horizontal"
                                        Min="0.0f"
                                        Step="1f">
                        <Label>Blur Radius</Label>
                    </PrelineInputNumber>
                </div>
            </PrelineNavCardTab>
        </PrelineNavCard>
        
        <ValidationSummary />
        
        @if (_originalImageUrl is not null)
        {
            <div class="w-full md:w-3/4 lg:w-1/2 flex flex-col space-y-4">
                <div class="flex flex-row space-x-4">
                    <div class="relative w-full overflow-hidden">
                        <img src="@_originalImageUrl"
                             class="w-full h-full object-cover"
                             alt="Original image"/>
                        <PrelineBadge Variant="PrelineBadgeVariant.Soft" Color="gray-800" BackgroundColor="gray-100" Class="absolute top-4 right-4 z-10">Original</PrelineBadge>
                    </div>
                    
                    @if (_preProcessedImageUrl is not null)
                    {
                        <div class="relative w-full overflow-hidden">
                            <img src="@_preProcessedImageUrl"
                                 class="w-full h-full object-cover"
                                 alt="Pre-processed image"/>
                            <PrelineBadge Variant="PrelineBadgeVariant.Soft" Color="blue-600" BackgroundColor="blue-100" Class="absolute top-4 right-4 z-10 dark:bg-blue-800/30 dark:text-blue-400">Pre-Processed</PrelineBadge>
                        </div>
                    }
                </div>
                
                @if (_generatedImageUrl is not null)
                {
                    <div class="flex justify-center">
                        <div class="relative w-1/2 overflow-hidden">
                            <img src="@_generatedImageUrl"
                                 class="w-full h-full object-cover"
                                 alt="Generated image"/>
                            <PrelineBadge Variant="PrelineBadgeVariant.Soft" Color="teal-500" BackgroundColor="teal-100" Class="absolute top-4 right-4 z-10 dark:bg-teal-800/30 dark:text-teal-500">Generated</PrelineBadge>
                        </div>
                    </div>
                }
            </div>
        }

        <div class="flex space-x-4">
            <button type="submit" class="px-4 py-2 bg-green-600 text-white rounded" @onclick="() => _generate = false">Preview</button>
            <button type="submit" class="px-4 py-2 bg-blue-600 text-white rounded" @onclick="() => _generate = true">Generate</button>
            @if (_exportUrl is not null)
            {
                <a id="exportMap" class="px-4 py-2 bg-stone-600 text-white rounded" href='@_exportUrl' download="@(_exportName ?? "Untitled.nbt")"
                   role="button" target="_top">Download</a>
            }
        </div>
    </EditForm>
    
    @if (_materialList is not null && _materialList.Count > 0)
    {
        <div class="-m-1.5 overflow-x-auto mt-4">
            <div class="p-1.5 min-w-full inline-block align-middle">
                <div class="border border-gray-200 rounded-lg overflow-hidden dark:border-neutral-700">
                    <PrelineTable TItem="MapMaterial"
                                  Items="@_sortedMaterialList"
                                  TotalCount="@_materialList.Count"
                                  IsLoading="false"
                                  CurrentPage="1"
                                  PageSize="@_materialList.Count"
                                  Columns="@_materialColumns"
                                  InitialSortColumn="Count"
                                  InitialSortAscending="false"
                                  OnPageChanged="OnMaterialPageChanged"
                                  EmptyText="No materials necessary."
                                  LoadingText="Loading materials...">
                    </PrelineTable>
                </div>
            </div>
        </div>
    }
}

@code {
    private DatabaseContext? _database;
    private PrelineFileUpload _imageUpload = null!;

    private string? _originalImageUrl;
    private string? _preProcessedImageUrl;
    private string? _generatedImageUrl;
    private string? _exportUrl;
    private string? _exportName;

    private string? _imageName;
    private SKBitmap? _inputImage;

    private List<MapMaterial>? _materialList;
    private List<MapMaterial>? _sortedMaterialList;
    private string _materialSortColumn = "Count";
    private bool _materialSortAscending;

    private readonly List<SelectOption<IExporter>> _exportOptions = [
        new() { Text = "Vanilla", Value = new VanillaExporter(), IsSelected = true }, 
        new() { Text = "Litematica", Value = new LitematicaExporter() }
    ];

    private readonly List<PrelineTable<MapMaterial>.TableColumn<MapMaterial>> _materialColumns = [
        new() {
            Header = "Block",
            PropertyName = "Block",
            Sortable = true,
            Template = material => @<div class="flex items-center space-x-2">
                                       <img src="@material.Material.ImageUrl" alt="@material.Material.MinecraftId"
                                            class="w-10 h-10 object-cover rounded-md border border-gray-300"/>
                                       <span>@material.Material.Name</span>
                                   </div>
        },
        new() {
            Header = "ID",
            PropertyName = "Id",
            Sortable = true,
            Template = material => @<span>@material.Material.MinecraftId</span>
        },
        new() {
            Header = "Count",
            PropertyName = "Count",
            Sortable = true,
            Template = material => @<span>@material.Count</span>
        }
    ];

    private List<Palette>? _palettes;
    private readonly FormModel _formModel = new();
    private bool _generate;

    protected override async Task OnInitializedAsync()
    {
        _database = await DbContextFactory.CreateDbContextAsync();

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity?.IsAuthenticated != true)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        var userId = Guid.Parse(authState.User.FindFirstValue(ClaimTypes.NameIdentifier) ?? string.Empty);
        if (userId == Guid.Empty)
        {
            NavigationManager.NavigateTo("/login");
            return;
        }

        _palettes = await _database.Palettes
            .Include(p => p.Blocks)
            .Include(p => p.PlaceholderBlock)
            .Where(p => p.UserId == userId)
            .ToListAsync();

        _formModel.SetPreProcessingChangeCallback(OnPreProcessingChange);
    }

    private async Task OnPreProcessingChange()
    {
        if (_inputImage is not null)
        {
            await GeneratePreview();
            StateHasChanged();
        }
    }

    private async Task GeneratePreview()
    {
        if (_inputImage is null || _formModel.SelectedPalette is null) return;
        
        var request = new MapGenerationRequest
        {
            InputImage = _inputImage,
            Palette = _formModel.SelectedPalette,
            WidthMultiplier = _formModel.WidthMultiplier,
            HeightMultiplier = _formModel.HeightMultiplier,
            ResizeMethod = _formModel.ResizeMethod,
            CropOffsetX = _formModel.CropOffsetX,
            CropOffsetY = _formModel.CropOffsetY,
            PadColor = _formModel.PadColor,
            Saturation = _formModel.Saturation,
            Brightness = _formModel.Brightness,
            Contrast = _formModel.Contrast,
            DitheringMode = DitheringMode.None,
            ComparisonMode = _formModel.ComparisonMode,
            GeneratorType = _formModel.GeneratorType,
            ShouldGenerateStructure = false
        };

        var result = Generator.Generate(request);
        
        _preProcessedImageUrl = ConvertStreamToBase64Url(result.ProcessedImage);
    }

    private async Task OnValidSubmit()
    {
        if (_inputImage is null || _formModel.SelectedPalette is null) return;
        
        var request = new MapGenerationRequest
        {
            InputImage = _inputImage,
            Palette = _formModel.SelectedPalette,
            WidthMultiplier = _formModel.WidthMultiplier,
            HeightMultiplier = _formModel.HeightMultiplier,
            ResizeMethod = _formModel.ResizeMethod,
            CropOffsetX = _formModel.CropOffsetX,
            CropOffsetY = _formModel.CropOffsetY,
            PadColor = _formModel.PadColor,
            Saturation = _formModel.Saturation,
            Brightness = _formModel.Brightness,
            Contrast = _formModel.Contrast,
            BlurRadius = _formModel.BlurRadius,
            DitheringMode = _formModel.DitheringMode,
            DitheringOptions = new DitheringOptions
            {
                ErrorDiffusionStrength = _formModel.ErrorDiffusionStrength,
                SerpentineScanning = _formModel.SerpentineScanning
            },
            ComparisonMode = _formModel.ComparisonMode,
            GeneratorType = _formModel.GeneratorType,
            ShouldGenerateStructure = _generate,
            Exporter = _generate ? _formModel.Exporter : null,
        };

        var result = Generator.Generate(request);
        
        _preProcessedImageUrl = ConvertStreamToBase64Url(result.ProcessedImage);
        _generatedImageUrl = ConvertStreamToBase64Url(result.GeneratedImage);

        if (_generate && result.Blocks is not null)
        {
            await ProcessMaterials(result.Blocks);
            
            if (result.ExportStream is not null)
            {
                var ms = new MemoryStream();
                await result.ExportStream.CopyToAsync(ms);
                
                _exportName = $"{_imageName}.{_formModel.Exporter?.GetFileFormat()}";
                _exportUrl = ConvertStreamToBase64Url(ms.ToArray(), "application/octet-stream");
            }
        }
    }

    private async Task ProcessMaterials(BlockInfo[] blocks)
    {
        if (_database is null) return;

        _materialList = [];
        foreach (var blockGroup in blocks.GroupBy(info => info.Id))
        {
            var block = await _database.Blocks.FirstOrDefaultAsync(b => b.MinecraftId == blockGroup.Key);
            var count = blockGroup.Count();
            if (block is null) continue;

            _materialList.Add(new MapMaterial(block, count));
        }

        _sortedMaterialList = _materialList.OrderByDescending(m => m.Count).ToList();
    }

    private async Task OnMaterialPageChanged(PrelineTable<MapMaterial>.PageChangedEventArgs args)
    {
        _materialSortColumn = args.SortColumn;
        _materialSortAscending = args.SortAscending;

        if (_materialList is null) return;

        _sortedMaterialList = _materialSortColumn switch
        {
            "Count" => _materialSortAscending
                ? _materialList.OrderBy(m => m.Count).ToList()
                : _materialList.OrderByDescending(m => m.Count).ToList(),
            "Block" => _materialSortAscending
                ? _materialList.OrderBy(m => m.Material.Name).ToList()
                : _materialList.OrderByDescending(m => m.Material.Name).ToList(),
            "Id" => _materialSortAscending
                ? _materialList.OrderBy(m => m.Material.MinecraftId).ToList()
                : _materialList.OrderByDescending(m => m.Material.MinecraftId).ToList(),
            _ => _materialList
        };
    }

    private static string ConvertStreamToBase64Url(byte[] data, string contentType = "image/png") 
        => $"data:{contentType};base64,{Convert.ToBase64String(data)}";

    private async void FileUploaded(IBrowserFile[] obj)
    {
        var file = obj.FirstOrDefault();
        if (file is null) return;

        await using var ms = new MemoryStream();
        var stream = file.OpenReadStream(_imageUpload.MaxFileSize);
        var buffer = new byte[4096];
        int bytesRead;
        long totalRead = 0;

        while ((bytesRead = await stream.ReadAsync(buffer)) > 0)
        {
            await ms.WriteAsync(buffer.AsMemory(0, bytesRead));
            totalRead += bytesRead;
            var percentComplete = (int)((float)totalRead / stream.Length * 100);
            _imageUpload.SetFileProgress(_imageUpload.GetSelectedFiles().First(), percentComplete);
        }

        var data = ms.ToArray();
        _imageName = Path.GetFileNameWithoutExtension(file.Name);
        _inputImage = SKBitmap.Decode(data);

        // Create original preview
        using var resized = new SKBitmap(
            _formModel.WidthMultiplier * 128, 
            _formModel.HeightMultiplier * 128, 
            _inputImage.ColorType, 
            _inputImage.AlphaType
        );
        using (var canvas = new SKCanvas(resized))
        using (var paint = new SKPaint { FilterQuality = SKFilterQuality.High, IsAntialias = true })
        {
            canvas.Clear(SKColors.Transparent);
            var srcRect = new SKRect(0, 0, _inputImage.Width, _inputImage.Height);
            var dstRect = new SKRect(0, 0, resized.Width, resized.Height);
            canvas.DrawBitmap(_inputImage, srcRect, dstRect, paint);
            canvas.Flush();
        }

        using var skImage = SKImage.FromBitmap(resized);
        using var imageData = skImage.Encode(SKEncodedImageFormat.Png, 100);
        _originalImageUrl = ConvertStreamToBase64Url(imageData.ToArray());

        await GeneratePreview();

        StateHasChanged();
    }

    private class FormModel
    {
        private float _saturation = 1.0f;
        private float _brightness = 1.0f;
        private float _contrast = 1.0f;
        private float _blurRadius = 0;
        private Func<Task>? _preProcessingChangeCallback;

        public DitheringMode DitheringMode { get; set; }
        public ComparisonMode ComparisonMode { get; set; }
        public GeneratorType GeneratorType { get; set; }
        public Palette? SelectedPalette { get; set; }
        public IExporter? Exporter { get; set; }
        public int WidthMultiplier { get; set; } = 1;
        public int HeightMultiplier { get; set; } = 1;
        public ResizeMethod ResizeMethod { get; set; } = ResizeMethod.Crop;
        public int CropOffsetX { get; set; }
        public int CropOffsetY { get; set; }
        public string PadColor { get; set; } = "#FFFFFF";
        public float ErrorDiffusionStrength { get; set; } = 1;
        public bool SerpentineScanning { get; set; }

        public float Saturation
        {
            get => _saturation;
            set
            {
                if (Math.Abs(_saturation - value) < float.Epsilon) return;
                _saturation = value;
                _preProcessingChangeCallback?.Invoke();
            }
        }

        public float Brightness
        {
            get => _brightness;
            set
            {
                if (Math.Abs(_brightness - value) < float.Epsilon) return;
                _brightness = value;
                _preProcessingChangeCallback?.Invoke();
            }
        }

        public float Contrast
        {
            get => _contrast;
            set
            {
                if (Math.Abs(_contrast - value) < float.Epsilon) return;
                _contrast = value;
                _preProcessingChangeCallback?.Invoke();
            }
        }
        
        public float BlurRadius
        {
            get => _blurRadius;
            set
            {
                if (Math.Abs(_blurRadius - value) < float.Epsilon) return;
                _blurRadius = value;
                _preProcessingChangeCallback?.Invoke();
            }
        }

        public void SetPreProcessingChangeCallback(Func<Task> callback)
        {
            _preProcessingChangeCallback = callback;
        }
    }

    record struct MapMaterial(Block Material, int Count);
}