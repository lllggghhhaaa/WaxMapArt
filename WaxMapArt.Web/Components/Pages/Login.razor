@page "/login"
@using System.ComponentModel.DataAnnotations
@using WaxMapArt.Web.Services
@inject AuthService Auth
@inject NavigationManager NavigationManager

<div class="flex items-center justify-center min-h-screen bg-gray-100 dark:bg-neutral-900">
    <div class="mt-7 bg-white border border-gray-200 rounded-xl shadow-2xs dark:bg-neutral-900 dark:border-neutral-700 dark:shadow-neutral-700/70 w-full max-w-md">
        <div class="p-4 sm:p-7">
            <div class="text-center">
                <h1 class="block text-2xl font-bold text-gray-800 dark:text-white">Sign in</h1>
                <p class="mt-2 text-sm text-gray-600 dark:text-neutral-400">
                    Don't have an account yet?
                    <a class="text-blue-600 decoration-2 hover:underline focus:outline-hidden focus:underline font-medium dark:text-blue-500" href="/signup">
                        Sign up here
                    </a>
                </p>
            </div>

            <div class="mt-5">
                <!-- Form -->
                <EditForm Model="Model" OnValidSubmit="HandleLogin" FormName="LoginForm">
                    <DataAnnotationsValidator />
                    
                    <div class="grid gap-y-4">
                        <!-- Form Group -->
                        <div>
                            <label for="username" class="block text-sm mb-2 dark:text-white">Username</label>
                            <div class="relative">
                                <InputText type="text" id="username" @bind-Value="Model.Username" 
                                          class="py-2.5 sm:py-3 px-4 block w-full border-gray-200 rounded-lg text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-400 dark:placeholder-neutral-500 dark:focus:ring-neutral-600" 
                                          aria-describedby="username-error" />
                                @if (HasUsernameError)
                                {
                                    <div class="absolute inset-y-0 end-0 pointer-events-none pe-3 flex items-center">
                                        <svg class="size-5 text-red-500" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" aria-hidden="true">
                                            <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8 4a.905.905 0 0 0-.9.995l.35 3.507a.552.552 0 0 0 1.1 0l.35-3.507A.905.905 0 0 0 8 4zm.002 6a1 1 0 1 0 0 2 1 1 0 0 0 0-2z"/>
                                        </svg>
                                    </div>
                                }
                            </div>
                            <ValidationMessage For="@(() => Model.Username)" class="text-xs text-red-600 mt-2" id="username-error"/>
                        </div>
                        <!-- End Form Group -->

                        <!-- Form Group -->
                        <div>
                            <div class="flex justify-between items-center">
                                <label for="password" class="block text-sm mb-2 dark:text-white">Password</label>
                                <a class="text-sm text-blue-600 decoration-2 hover:underline focus:outline-hidden focus:underline font-medium dark:text-blue-500" href="/recover-account">
                                    Forgot password?
                                </a>
                            </div>
                            <div class="relative">
                                <InputText type="password" id="password" @bind-Value="Model.Password" 
                                          class="py-2.5 sm:py-3 px-4 block w-full border-gray-200 rounded-lg text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-400 dark:placeholder-neutral-500 dark:focus:ring-neutral-600" 
                                          aria-describedby="password-error" />
                                @if (HasPasswordError)
                                {
                                    <div class="absolute inset-y-0 end-0 pointer-events-none pe-3 flex items-center">
                                        <svg class="size-5 text-red-500" width="16" height="16" fill="currentColor" viewBox="0 0 16 16" aria-hidden="true">
                                            <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zM8 4a.905.905 0 0 0-.9.995l.35 3.507a.552.552 0 0 0 1.1 0l.35-3.507A.905.905 0 0 0 8 4zm.002 6a1 1 0 1 0 0 2 1 1 0 0 0 0-2z"/>
                                        </svg>
                                    </div>
                                }
                            </div>
                            <ValidationMessage For="@(() => Model.Password)" class="text-xs text-red-600 mt-2" id="password-error"/>
                        </div>
                        <!-- End Form Group -->

                        <!-- Checkbox -->
                        <div class="flex items-center">
                            <div class="flex">
                                <InputCheckbox id="remember-me" @bind-Value="Model.RememberMe" 
                                              class="shrink-0 mt-0.5 border-gray-200 rounded text-blue-600 focus:ring-blue-500 dark:bg-neutral-800 dark:border-neutral-700 dark:checked:bg-blue-500 dark:checked:border-blue-500 dark:focus:ring-offset-gray-800" />
                            </div>
                            <div class="ms-3">
                                <label for="remember-me" class="text-sm dark:text-white">Remember me</label>
                            </div>
                        </div>
                        <!-- End Checkbox -->

                        <button type="submit" disabled="@_isSubmitting" class="w-full py-3 px-4 inline-flex justify-center items-center gap-x-2 text-sm font-medium rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 focus:outline-hidden focus:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none">
                            @if (_isSubmitting)
                            {
                                <span class="animate-spin inline-block w-4 h-4 border-[3px] border-current border-t-transparent text-white rounded-full" role="status" aria-label="loading"></span>
                                <span>Signing in...</span>
                            }
                            else
                            {
                                <span>Sign in</span>
                            }
                        </button>
                    </div>
                </EditForm>
                <!-- End Form -->
                
                @if (!string.IsNullOrEmpty(_errorMessage))
                {
                    <div class="mt-4 p-4 text-sm text-red-800 rounded-lg bg-red-50 dark:bg-gray-800 dark:text-red-400" role="alert">
                        @_errorMessage
                    </div>
                }
            </div>
        </div>
    </div>
</div>

@code {
    [SupplyParameterFromForm]
    private LoginModel? Model { get; set; }
    
    private string? _errorMessage;
    private bool _isSubmitting;

    private bool HasUsernameError => !string.IsNullOrWhiteSpace(Model?.Username) && Model.Username.Length < 5;
    private bool HasPasswordError => !string.IsNullOrWhiteSpace(Model?.Password) && Model.Password.Length < 8;

    protected override void OnInitialized()
    {
        Model ??= new LoginModel();
    }

    private async Task HandleLogin()
    {
        _isSubmitting = true;
        _errorMessage = null;
        StateHasChanged();

        try
        {
            var result = await Auth.LoginAsync(Model.Username, Model.Password);

            if (result)
            {
                NavigationManager.NavigateTo("/");
                return;
            }

            _errorMessage = "Invalid username or password.";
        }
        catch (Exception ex) when (ex is not NavigationException)
        {
            _errorMessage = $"An error occurred: {ex.Message}";
            Console.WriteLine($"Login error: {ex}");
        }
        finally
        {
            _isSubmitting = false;
            StateHasChanged();
        }
    }

    private class LoginModel
    {
        [Required(ErrorMessage = "Username is required")]
        [StringLength(50, MinimumLength = 5, ErrorMessage = "Username must be between 5 and 50 characters")]
        public string Username { get; set; } = string.Empty;

        [Required(ErrorMessage = "Password is required")]
        [StringLength(100, MinimumLength = 6, ErrorMessage = "Password must be between 6 and 100 characters")]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }
}