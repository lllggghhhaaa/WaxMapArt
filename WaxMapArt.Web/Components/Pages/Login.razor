@page "/login"
@using System.ComponentModel.DataAnnotations
@using WaxMapArt.Web.Services
@inject AuthService Auth
@inject NavigationManager NavigationManager


<div class="flex items-center justify-center min-h-screen bg-gray-100">
    <div class="w-full max-w-md bg-white p-8 rounded-lg shadow-md">
        <h3 class="text-2xl font-semibold mb-6 text-center">Login</h3>

        <EditForm Model="Model" OnValidSubmit="HandleLogin" FormName="LoginForm">
            <DataAnnotationsValidator />
            <ValidationSummary class="text-red-500 mb-4" />

            <div class="mb-4">
                <label for="username" class="block text-sm font-medium text-gray-700">Username:</label>
                <InputText id="username" @bind-Value="Model.Username" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 p-2" />
                <ValidationMessage For="@(() => Model.Username)" class="text-red-500 text-sm mt-1" />
            </div>

            <div class="mb-4">
                <label for="password" class="block text-sm font-medium text-gray-700">Password:</label>
                <InputText type="password" id="password" @bind-Value="Model.Password" class="mt-1 block w-full border border-gray-300 rounded-md shadow-sm focus:ring-indigo-500 focus:border-indigo-500 p-2" />
                <ValidationMessage For="@(() => Model.Password)" class="text-red-500 text-sm mt-1" />
            </div>

            <div class="mb-6">
                <label class="inline-flex items-center">
                    <InputCheckbox @bind-Value="Model.RememberMe" class="text-indigo-600" />
                    <span class="ml-2 text-sm text-gray-700">Remember me</span>
                </label>
            </div>

            <button type="submit" class="w-full bg-indigo-600 text-white font-semibold py-2 rounded-md hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-indigo-500 focus:ring-opacity-50 transition duration-200">
                Login
            </button>
        </EditForm>

        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="mt-4 text-center text-red-500">@_errorMessage</div>
        }
    </div>
</div>

@code {
    [SupplyParameterFromForm] private LoginModel Model { get; set; } = new();
    private string? _errorMessage;

    private async Task HandleLogin()
    {
        var result = await Auth.LoginAsync(Model.Username, Model.Password);

        if (result)
            NavigationManager.NavigateTo("/", true);
        else
            _errorMessage = "Invalid username or password.";
    }

    private class LoginModel
    {
        [Required]
        public string Username { get; set; } = string.Empty;

        [Required]
        [DataType(DataType.Password)]
        public string Password { get; set; } = string.Empty;

        public bool RememberMe { get; set; }
    }
}
