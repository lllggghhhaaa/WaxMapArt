@page "/profile"
@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using WaxMapArt.Web.Services
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthService AuthService
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager Navigation
@inject ImageService Image
@inject UserProfileState UserProfileState
@inject ILogger<Profile> Logger

<AuthorizeView>
    <Authorized Context="authContext">
        <div class="max-w-4xl px-4 py-10 sm:px-6 lg:px-8 mx-auto">
            <div class="bg-white rounded-xl shadow-xs p-4 sm:p-7 dark:bg-neutral-800">
                <div class="mb-8">
                    <h2 class="text-xl font-bold text-gray-800 dark:text-neutral-200">
                        Profile
                    </h2>
                    <p class="text-sm text-gray-600 dark:text-neutral-400">
                        Manage your name, password and account settings.
                    </p>
                </div>

                @if (!string.IsNullOrEmpty(errorMessage))
                {
                    <div class="mb-4 p-4 bg-red-50 border border-red-200 rounded-lg dark:bg-red-900/20 dark:border-red-800">
                        <p class="text-sm text-red-800 dark:text-red-400">@errorMessage</p>
                    </div>
                }

                @if (!string.IsNullOrEmpty(successMessage))
                {
                    <div class="mb-4 p-4 bg-green-50 border border-green-200 rounded-lg dark:bg-green-900/20 dark:border-green-800">
                        <p class="text-sm text-green-800 dark:text-green-400">@successMessage</p>
                    </div>
                }

                <EditForm Model="@profileModel" OnValidSubmit="@HandleSubmit" FormName="ProfileForm">
                    <DataAnnotationsValidator />
                    
                    <div class="grid sm:grid-cols-12 gap-2 sm:gap-6">
                        <div class="sm:col-span-3">
                            <label class="inline-block text-sm text-gray-800 mt-2.5 dark:text-neutral-200">
                                Profile photo
                            </label>
                        </div>

                        <div class="sm:col-span-9">
                            <div class="flex items-center gap-5">
                                <img class="inline-block size-16 rounded-full ring-2 ring-white dark:ring-neutral-900" 
                                     src="@_profileImageUrl" 
                                     alt="Avatar">
                                <div class="flex gap-x-2">
                                    <div>
                                        <label for="photo-upload" class="py-2 px-3 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-gray-200 bg-white text-gray-800 shadow-2xs hover:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none focus:outline-hidden focus:bg-gray-50 dark:bg-transparent dark:border-neutral-700 dark:text-neutral-300 dark:hover:bg-neutral-800 dark:focus:bg-neutral-800 cursor-pointer">
                                            <svg class="shrink-0 size-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                                <path d="M21 15v4a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2v-4"/>
                                                <polyline points="17 8 12 3 7 8"/>
                                                <line x1="12" x2="12" y1="3" y2="15"/>
                                            </svg>
                                            Upload photo
                                        </label>
                                        <InputFile id="photo-upload" OnChange="@HandlePhotoUpload" accept="image/*" class="hidden" disabled="@isUploading" />
                                    </div>
                                    @if (_hasCustomAvatar)
                                    {
                                        <button type="button" @onclick="RemovePhoto" disabled="@isUploading" 
                                                class="py-2 px-3 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-gray-200 bg-white text-red-600 shadow-2xs hover:bg-red-50 disabled:opacity-50 disabled:pointer-events-none dark:bg-transparent dark:border-neutral-700 dark:text-red-400 dark:hover:bg-red-900/20">
                                            Remove
                                        </button>
                                    }
                                </div>
                            </div>
                            @if (isUploading)
                            {
                                <p class="mt-2 text-sm text-gray-600 dark:text-neutral-400">Uploading...</p>
                            }
                        </div>

                        <div class="sm:col-span-3">
                            <label for="username" class="inline-block text-sm text-gray-800 mt-2.5 dark:text-neutral-200">
                                Username
                            </label>
                        </div>

                        <div class="sm:col-span-9">
                            <InputText id="username" @bind-Value="profileModel.Username" 
                                       class="py-1.5 sm:py-2 px-3 pe-11 block w-full border-gray-200 shadow-2xs rounded-lg sm:text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-800 dark:border-neutral-700 dark:text-neutral-400 dark:placeholder-neutral-500 dark:focus:ring-neutral-600" 
                                       placeholder="Enter username" />
                            <ValidationMessage For="@(() => profileModel.Username)" class="text-sm text-red-600 dark:text-red-400 mt-1" />
                        </div>

                        <div class="sm:col-span-3">
                            <label class="inline-block text-sm text-gray-800 mt-2.5 dark:text-neutral-200">
                                Password
                            </label>
                        </div>

                        <div class="sm:col-span-9">
                            <div class="space-y-2">
                                <InputText id="current-password" type="password" @bind-Value="profileModel.CurrentPassword" 
                                           class="py-1.5 sm:py-2 px-3 pe-11 block w-full border-gray-200 shadow-2xs rounded-lg sm:text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-800 dark:border-neutral-700 dark:text-neutral-400 dark:placeholder-neutral-500 dark:focus:ring-neutral-600" 
                                           placeholder="Enter current password (leave empty to keep current)" />
                                
                                <InputText id="new-password" type="password" @bind-Value="profileModel.NewPassword" 
                                           class="py-1.5 sm:py-2 px-3 pe-11 block w-full border-gray-200 shadow-2xs rounded-lg sm:text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-800 dark:border-neutral-700 dark:text-neutral-400 dark:placeholder-neutral-500 dark:focus:ring-neutral-600" 
                                           placeholder="Enter new password" />
                                <ValidationMessage For="@(() => profileModel.NewPassword)" class="text-sm text-red-600 dark:text-red-400" />
                                
                                <InputText id="confirm-password" type="password" @bind-Value="profileModel.ConfirmPassword" 
                                           class="py-1.5 sm:py-2 px-3 pe-11 block w-full border-gray-200 shadow-2xs rounded-lg sm:text-sm focus:border-blue-500 focus:ring-blue-500 disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-800 dark:border-neutral-700 dark:text-neutral-400 dark:placeholder-neutral-500 dark:focus:ring-neutral-600" 
                                           placeholder="Confirm new password" />
                                <ValidationMessage For="@(() => profileModel.ConfirmPassword)" class="text-sm text-red-600 dark:text-red-400" />
                            </div>
                        </div>
                    </div>

                    <div class="mt-5 flex justify-end gap-x-2">
                        <button type="button" @onclick="Cancel" disabled="@isSubmitting"
                                class="py-2 px-3 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-gray-200 bg-white text-gray-800 shadow-2xs hover:bg-gray-50 disabled:opacity-50 disabled:pointer-events-none focus:outline-hidden focus:bg-gray-50 dark:bg-transparent dark:border-neutral-700 dark:text-neutral-300 dark:hover:bg-neutral-800 dark:focus:bg-neutral-800">
                            Cancel
                        </button>
                        <button type="submit" disabled="@isSubmitting"
                                class="py-2 px-3 inline-flex items-center gap-x-2 text-sm font-medium rounded-lg border border-transparent bg-blue-600 text-white hover:bg-blue-700 focus:outline-hidden focus:bg-blue-700 disabled:opacity-50 disabled:pointer-events-none">
                            @if (isSubmitting)
                            {
                                <span>Saving...</span>
                            }
                            else
                            {
                                <span>Save changes</span>
                            }
                        </button>
                    </div>
                </EditForm>
            </div>
        </div>
    </Authorized>
    <NotAuthorized>
        <div class="max-w-4xl px-4 py-10 sm:px-6 lg:px-8 mx-auto text-center">
            <p class="text-gray-600 dark:text-neutral-400">Please log in to view your profile.</p>
        </div>
    </NotAuthorized>
</AuthorizeView>

@code {
    private ProfileModel profileModel = new();
    private User? currentUser;
    private string? errorMessage;
    private string? successMessage;
    private bool isSubmitting;
    private bool isUploading;
    private string _profileImageUrl = string.Empty;
    private bool _hasCustomAvatar;

    protected override async Task OnInitializedAsync()
    {
        currentUser = AuthService.GetCurrentUser();
        
        if (currentUser != null)
        {
            profileModel.Username = currentUser.Name ?? string.Empty;
            await LoadProfileImage();
        }
        else
        {
            Navigation.NavigateTo("/login");
        }
    }

    private async Task LoadProfileImage()
    {
        if (currentUser is null) return;
        
        var url = await Image.GetUserAvatarUrlAsync(currentUser.Id);
        
        if (!string.IsNullOrEmpty(url))
        {
            _profileImageUrl = url;
            _hasCustomAvatar = true;
        }
        else
        {
            _profileImageUrl = $"https://ui-avatars.com/api/?name={Uri.EscapeDataString(currentUser.Name ?? "User")}&background=random";
            _hasCustomAvatar = false;
        }
    }

    private async Task HandlePhotoUpload(InputFileChangeEventArgs e)
    {
        errorMessage = null;
        successMessage = null;
        isUploading = true;

        try
        {
            if (currentUser is null) 
            {
                errorMessage = "User not found";
                return;
            }
            
            var file = e.File;
            
            if (file.Size > 20 * 1024 * 1024)
            {
                errorMessage = "File size must be less than 20MB";
                return;
            }

            if (!file.ContentType.StartsWith("image/"))
            {
                errorMessage = "Only image files are allowed";
                return;
            }

            await using var stream = file.OpenReadStream(maxAllowedSize: 20 * 1024 * 1024);
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;
            
            await Image.UploadUserAvatarAsync(currentUser.Id, memoryStream, file.Name, file.ContentType);
            
            await LoadProfileImage();
            UserProfileState.SetAvatar(_profileImageUrl);
            successMessage = "Photo uploaded successfully!";
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error uploading photo");
            errorMessage = $"Failed to upload photo: {ex.Message}";
        }
        finally
        {
            isUploading = false;
        }
    }

    private async Task RemovePhoto()
    {
        if (currentUser == null) return;

        errorMessage = null;
        successMessage = null;

        try
        {
            var deleted = await Image.DeleteUserAvatarAsync(currentUser.Id);
            
            if (deleted)
            {
                await LoadProfileImage();
                UserProfileState.SetAvatar("");
                successMessage = "Photo removed successfully";
            }
            else
            {
                errorMessage = "No photo to remove";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error removing photo");
            errorMessage = "Failed to remove photo. Please try again.";
        }
    }

    private async Task HandleSubmit()
    {
        if (currentUser == null) return;

        errorMessage = null;
        successMessage = null;
        isSubmitting = true;

        try
        {
            var needsUpdate = false;
            var needsTokenRefresh = false;

            if (!string.IsNullOrEmpty(profileModel.Username) && profileModel.Username != currentUser.Name)
            {
                var usernameUpdated = await AuthService.UpdateUsernameAsync(currentUser.Id, profileModel.Username);
                
                if (!usernameUpdated)
                {
                    errorMessage = "Username is already taken";
                    return;
                }
                
                currentUser.Name = profileModel.Username;
                needsUpdate = true;
                needsTokenRefresh = true;
            }

            // Update password
            if (!string.IsNullOrEmpty(profileModel.NewPassword))
            {
                if (string.IsNullOrEmpty(profileModel.CurrentPassword))
                {
                    errorMessage = "Current password is required to set a new password";
                    return;
                }

                if (profileModel.NewPassword != profileModel.ConfirmPassword)
                {
                    errorMessage = "New password and confirmation do not match";
                    return;
                }

                var passwordValid = await AuthService.ComparePassword(currentUser, profileModel.CurrentPassword);
                if (!passwordValid)
                {
                    errorMessage = "Current password is incorrect";
                    return;
                }

                var passwordUpdated = await AuthService.UpdatePasswordAsync(currentUser, profileModel.NewPassword);
                
                if (!passwordUpdated)
                {
                    errorMessage = "Failed to update password";
                    return;
                }
                
                needsUpdate = true;
            }

            if (needsUpdate)
            {
                successMessage = "Profile updated successfully!";
                
                profileModel.CurrentPassword = string.Empty;
                profileModel.NewPassword = string.Empty;
                profileModel.ConfirmPassword = string.Empty;

                if (needsTokenRefresh)
                {
                    // Re-login to refresh JWT token with new username
                    if (AuthStateProvider is CustomAuthenticationStateProvider customProvider)
                    {
                        customProvider.NotifyAuthenticationStateChanged();
                    }
                }
            }
            else
            {
                successMessage = "No changes to save";
            }
        }
        catch (Exception ex)
        {
            Logger.LogError(ex, "Error updating profile");
            errorMessage = "Failed to update profile. Please try again.";
        }
        finally
        {
            isSubmitting = false;
        }
    }

    private void Cancel()
    {
        if (currentUser != null)
        {
            profileModel.Username = currentUser.Name ?? string.Empty;
            profileModel.CurrentPassword = string.Empty;
            profileModel.NewPassword = string.Empty;
            profileModel.ConfirmPassword = string.Empty;
        }
        errorMessage = null;
        successMessage = null;
    }

    private class ProfileModel
    {
        [Required(ErrorMessage = "Username is required")]
        [StringLength(50, MinimumLength = 3, ErrorMessage = "Username must be between 3 and 50 characters")]
        public string Username { get; set; } = string.Empty;

        public string? CurrentPassword { get; set; }

        [StringLength(100, MinimumLength = 8, ErrorMessage = "Password must be at least 8 characters")]
        public string? NewPassword { get; set; }

        [Compare(nameof(NewPassword), ErrorMessage = "Passwords do not match")]
        public string? ConfirmPassword { get; set; }
    }
}