@inherits InputBase<bool>

<div class="flex items-center gap-x-3">
    <!-- Toggle -->
    <label for="@Id" class="relative inline-block w-11 h-6 cursor-pointer flex-shrink-0">
        <input
            type="checkbox"
            id="@Id"
            checked="@CurrentValue"
            @onchange="OnChange"
            class="peer sr-only"
            disabled="@Disabled"
        />
        <span class="absolute inset-0 bg-gray-200 rounded-full transition-colors duration-200 ease-in-out peer-checked:bg-blue-600 dark:bg-neutral-700 dark:peer-checked:bg-blue-500 peer-disabled:opacity-50 peer-disabled:pointer-events-none"></span>
        <span class="absolute top-0.5 left-0.5 w-5 h-5 bg-white rounded-full shadow-sm transition-transform duration-200 ease-in-out peer-checked:translate-x-[20px] dark:bg-neutral-400 dark:peer-checked:bg-white"></span>
    </label>

    <!-- Label -->
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@Id" class="text-sm text-gray-500 dark:text-neutral-400 select-none cursor-pointer">@Label</label>
    }
</div>

@code {
    [Parameter] public string? Label { get; set; }
    [Parameter] public bool Disabled { get; set; }

    private string Id { get; } = $"toggle-{Guid.NewGuid()}";

    private void OnChange(ChangeEventArgs e)
    {
        CurrentValue = (bool)e.Value!;
    }

    protected override bool TryParseValueFromString(string? value, out bool result, out string? validationErrorMessage)
    {
        result = bool.TryParse(value, out var parsed) && parsed;
        validationErrorMessage = null;
        return true;
    }
}