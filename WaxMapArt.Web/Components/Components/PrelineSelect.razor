@typeparam TValue
@inject IJSRuntime JS

<div class="relative w-full" @ref="_containerRef">
  <!-- Toggle Button -->
  <button type="button"
          class="@ToggleClasses @(IsDisabled ? "pointer-events-none opacity-50" : "")"
          @onclick="ToggleDropdown"
          disabled="@IsDisabled"
          aria-label="@AriaLabel"
          aria-expanded="@_isOpen">
    
    <span class="flex gap-x-2 text-nowrap">
      @if (SelectedValue is not null && SelectOptions is not null)
      {
        @SelectOptionTemplate(SelectOptions.FirstOrDefault(option => EqualityComparer<TValue>.Default.Equals(option.Value, SelectedValue))!)
      }
      else
      {
        <span class="text-gray-500 dark:text-neutral-500">@Placeholder</span>
      }
    </span>

    <div class="absolute top-1/3 end-2.5">
      <svg class="shrink-0 size-4 text-gray-500 dark:text-neutral-500 transition-transform @(_isOpen ? "rotate-90" : "")" 
           xmlns="http://www.w3.org/2000/svg" 
           width="24" height="24" 
           viewBox="0 0 24 24"
           fill="none"
           stroke="currentColor" 
           stroke-width="2" 
           stroke-linecap="round" 
           stroke-linejoin="round">
        <path d="m6 9 6 6 6-6"></path>
      </svg>
    </div>
  </button>

  <!-- Dropdown -->
  @if (_isOpen)
  {
    <div class="@DropdownClasses @MaxHeight"
         @onclick:stopPropagation="true">
      
      @if (!string.IsNullOrEmpty(DefaultOptionText))
      {
        <div class="@OptionClasses @(SelectedValue == null || EqualityComparer<TValue>.Default.Equals(SelectedValue, default) ? "bg-gray-100 dark:bg-neutral-800" : "")"
             @onclick="() => SelectOption(default)">
          <div class="flex justify-between items-center w-full">
            <span>@DefaultOptionText</span>
            @if (SelectedValue == null || EqualityComparer<TValue>.Default.Equals(SelectedValue, default))
            {
              <span>
                <svg class="shrink-0 size-3.5 text-blue-600 dark:text-blue-500" 
                     xmlns="http://www.w3.org/2000/svg" 
                     width="24" height="24" 
                     viewBox="0 0 24 24" 
                     fill="none" 
                     stroke="currentColor" 
                     stroke-width="2" 
                     stroke-linecap="round" 
                     stroke-linejoin="round">
                  <polyline points="20 6 9 17 4 12"/>
                </svg>
              </span>
            }
          </div>
        </div>
      }
      
      @if (SelectOptions != null)
      {
        @foreach (var option in SelectOptions)
        {
          var isSelected = EqualityComparer<TValue>.Default.Equals(option.Value, SelectedValue);
          var isDisabled = option.IsDisabled;
          
          <div class="@OptionClasses @(isSelected ? "bg-gray-100 dark:bg-neutral-800" : "") @(isDisabled ? "opacity-50 cursor-not-allowed" : "")"
               @onclick="() => SelectOption(option.Value)"
               @onclick:stopPropagation="true">
            <div class="flex justify-between items-center w-full">
              <span>@SelectOptionTemplate(option)</span>
              @if (isSelected)
              {
                <span>
                  <svg class="shrink-0 size-3.5 text-blue-600 dark:text-blue-500" 
                       xmlns="http://www.w3.org/2000/svg" 
                       width="24" height="24" 
                       viewBox="0 0 24 24" 
                       fill="none" 
                       stroke="currentColor" 
                       stroke-width="2" 
                       stroke-linecap="round" 
                       stroke-linejoin="round">
                    <polyline points="20 6 9 17 4 12"/>
                  </svg>
                </span>
              }
            </div>
          </div>
        }
      }
      else if (Options != null)
      {
        @foreach (var option in Options)
        {
          var isSelected = EqualityComparer<TValue>.Default.Equals(option, SelectedValue);
          
          <div class="@OptionClasses @(isSelected ? "bg-gray-100 dark:bg-neutral-800" : "")"
               @onclick="() => SelectOption(option)"
               @onclick:stopPropagation="true">
            <div class="flex justify-between items-center w-full">
              <span>@GetOptionText(option)</span>
              @if (isSelected)
              {
                <span>
                  <svg class="shrink-0 size-3.5 text-blue-600 dark:text-blue-500" 
                       xmlns="http://www.w3.org/2000/svg" 
                       width="24" height="24" 
                       viewBox="0 0 24 24" 
                       fill="none" 
                       stroke="currentColor" 
                       stroke-width="2" 
                       stroke-linecap="round" 
                       stroke-linejoin="round">
                    <polyline points="20 6 9 17 4 12"/>
                  </svg>
                </span>
              }
            </div>
          </div>
        }
      }
      else
      {
        @ChildContent
      }
    </div>
  }
</div>

@code {
  private ElementReference _containerRef;
  private bool _isOpen;
  private DotNetObjectReference<PrelineSelect<TValue>>? _dotNetRef;
  private IJSObjectReference? _module;

  [Parameter] public TValue? SelectedValue { get; set; }
  [Parameter] public EventCallback<TValue?> SelectedValueChanged { get; set; }
  [Parameter] public EventCallback<TValue?> OnSelectionChange { get; set; }

  [Parameter] public string Placeholder { get; set; } = "Select a option...";
  [Parameter] public string DefaultOptionText { get; set; } = string.Empty;
  [Parameter] public bool IsDisabled { get; set; }
  [Parameter] public string Width { get; set; } = "w-full";
  [Parameter] public string MaxHeight { get; set; } = "max-h-72";
  [Parameter] public string AriaLabel { get; set; } = string.Empty;
  [Parameter] public RenderFragment<SelectOption<TValue>> SelectOptionTemplate { get; set; } = option => builder => builder.AddContent(0, option.Text);

  [Parameter] public string ToggleClasses { get; set; } = "relative py-3 ps-4 pe-9 flex gap-x-2 text-nowrap w-full cursor-pointer bg-white border border-gray-200 rounded-lg text-start text-sm focus:outline-none focus:ring-2 focus:ring-blue-500 dark:bg-neutral-900 dark:border-neutral-700 dark:text-neutral-400 dark:focus:outline-none dark:focus:ring-1 dark:focus:ring-neutral-600";
  [Parameter] public string DropdownClasses { get; set; } = "absolute mt-2 z-50 w-full p-1 space-y-0.5 bg-white border border-gray-200 rounded-lg overflow-hidden overflow-y-auto shadow-lg dark:bg-neutral-900 dark:border-neutral-700";
  [Parameter] public string OptionClasses { get; set; } = "py-2 px-4 w-full text-sm text-gray-800 cursor-pointer hover:bg-gray-100 rounded-lg focus:outline-none focus:bg-gray-100 dark:bg-neutral-900 dark:hover:bg-neutral-800 dark:text-neutral-200 dark:focus:bg-neutral-800";

  [Parameter] public List<TValue>? Options { get; set; }
  [Parameter] public List<SelectOption<TValue>>? SelectOptions { get; set; }
  [Parameter] public Func<TValue, string>? ValueSelector { get; set; }
  [Parameter] public Func<TValue, string>? TextSelector { get; set; }
  
  [Parameter] public RenderFragment? ChildContent { get; set; }

  [Parameter] public EventCallback OnOpen { get; set; }
  [Parameter] public EventCallback OnClose { get; set; }

  protected override async Task OnAfterRenderAsync(bool firstRender)
  {
    if (firstRender)
    {
      _module = await JS.InvokeAsync<IJSObjectReference>("import",
        "./Components/Components/PrelineSelect.razor.js");
      
      _dotNetRef = DotNetObjectReference.Create(this);
      
      await _module.InvokeVoidAsync("initSelect", _containerRef, _dotNetRef);
    }
  }

  protected override async Task OnInitializedAsync()
  {
    if (SelectOptions is not null && SelectedValue is null)
    {
      var defaultOption = SelectOptions.Find(option => option.IsSelected);
      if (defaultOption is null) return;

      SelectedValue = defaultOption.Value;
      await SelectedValueChanged.InvokeAsync(SelectedValue);
    }
  }

  private async Task ToggleDropdown()
  {
    if (IsDisabled) return;

    _isOpen = !_isOpen;

    if (_isOpen)
    {
      await OnOpen.InvokeAsync();
    }
    else
    {
      await OnClose.InvokeAsync();
    }
  }

  [JSInvokable]
  public async Task CloseFromOutside()
  {
    if (_isOpen)
    {
      _isOpen = false;
      await OnClose.InvokeAsync();
      StateHasChanged();
    }
  }

  private async Task SelectOption(TValue? value)
  {
    if (SelectOptions != null)
    {
      var option = SelectOptions.FirstOrDefault(o => EqualityComparer<TValue>.Default.Equals(o.Value, value));
      if (option?.IsDisabled == true) return;
    }

    SelectedValue = value;
    _isOpen = false;

    await SelectedValueChanged.InvokeAsync(value);
    await OnSelectionChange.InvokeAsync(value);
    await OnClose.InvokeAsync();
  }

  private string GetSelectedText()
  {
    if (SelectedValue == null) return string.Empty;

    if (SelectOptions == null) return GetOptionText(SelectedValue);
    
    var option = SelectOptions.FirstOrDefault(o => EqualityComparer<TValue>.Default.Equals(o.Value, SelectedValue));
    return option?.Text ?? string.Empty;
  }

  private string GetOptionText(TValue option)
  {
    if (option == null) return string.Empty;
    
    if (TextSelector != null)
      return TextSelector(option);
    
    if (typeof(TValue).IsPrimitive || typeof(TValue) == typeof(string))
      return option.ToString() ?? string.Empty;
    
    var type = typeof(TValue);
    var textProperty = type.GetProperty("Name") ?? type.GetProperty("Text") ?? type.GetProperty("Title") ?? type.GetProperty("Description");
    
    if (textProperty != null)
      return textProperty.GetValue(option)?.ToString() ?? string.Empty;
    
    return option.ToString() ?? string.Empty;
  }

  public async Task OpenAsync()
  {
    if (!_isOpen)
    {
      _isOpen = true;
      await OnOpen.InvokeAsync();
      StateHasChanged();
    }
  }

  public async Task CloseAsync()
  {
    if (_isOpen)
    {
      _isOpen = false;
      await OnClose.InvokeAsync();
      StateHasChanged();
    }
  }

  public async Task SetValueAsync(TValue value)
  {
    await SelectOption(value);
    StateHasChanged();
  }

  public void Dispose()
  {
    _dotNetRef?.Dispose();
  }
}