<div class="@ContainerClass">
    <EditForm Model="this">
        <label class="block">
            <span class="@LabelClass">@Label</span>
            <InputFile OnChange="HandleFileSelected" 
                       multiple="@AllowMultiple"
                       accept="@AcceptedFileTypes"
                       disabled="@IsDisabled"
                       class="@InputClass" />
        </label>
        @if (!string.IsNullOrEmpty(_errorMessage))
        {
            <div class="@ErrorClass">
                @_errorMessage
            </div>
        }
        @if (ShowSelectedFiles && _selectedFiles?.Any() == true)
        {
            <div class="@SelectedFilesClass space-y-4">
                @foreach (var file in _selectedFiles)
                {
                    var fileInfo = GetFileInfo(file);
                    <div>
                        <div class="mb-2 flex justify-between items-center">
                            <div class="flex items-center gap-x-3">
                                <span class="size-8 flex justify-center items-center border border-gray-200 text-gray-500 rounded-lg dark:border-neutral-700 dark:text-neutral-500">
                                    @((MarkupString)GetFileIcon(file))
                                </span>
                                <div>
                                    <p class="text-sm font-medium text-gray-800 dark:text-white">@file.Name</p>
                                    <p class="text-xs text-gray-500 dark:text-neutral-500">@FormatFileSize(file.Size)</p>
                                </div>
                            </div>
                            <div class="inline-flex items-center gap-x-2">
                                @switch (fileInfo.Progress)
                                {
                                    case 100:
                                        <span class="relative">
                                            <svg class="shrink-0 size-4 text-teal-500" xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" viewBox="0 0 16 16">
                                                <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0zm-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z"></path>
                                            </svg>
                                            <span class="sr-only">Success</span>
                                        </span>
                                        break;
                                    case > 0 and < 100:
                                        <button type="button" @onclick="() => PauseUpload(file)" class="relative text-gray-500 hover:text-gray-800 focus:outline-hidden focus:text-gray-800 disabled:opacity-50 disabled:pointer-events-none dark:text-neutral-500 dark:hover:text-neutral-200 dark:focus:text-neutral-200">
                                            <svg class="shrink-0 size-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                                <rect width="4" height="16" x="6" y="4"></rect>
                                                <rect width="4" height="16" x="14" y="4"></rect>
                                            </svg>
                                            <span class="sr-only">Pause</span>
                                        </button>
                                        break;
                                }
                                <button type="button" @onclick="() => RemoveFile(file)" class="relative text-gray-500 hover:text-gray-800 focus:outline-hidden focus:text-gray-800 disabled:opacity-50 disabled:pointer-events-none dark:text-neutral-500 dark:hover:text-neutral-200 dark:focus:text-neutral-200">
                                    <svg class="shrink-0 size-4" xmlns="http://www.w3.org/2000/svg" width="24" height="24" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
                                        <path d="M3 6h18"></path>
                                        <path d="M19 6v14c0 1-1 2-2 2H7c-1 0-2-1-2-2V6"></path>
                                        <path d="M8 6V4c0-1 1-2 2-2h4c1 0 2 1 2 2v2"></path>
                                        <line x1="10" x2="10" y1="11" y2="17"></line>
                                        <line x1="14" x2="14" y1="11" y2="17"></line>
                                    </svg>
                                    <span class="sr-only">Delete</span>
                                </button>
                            </div>
                        </div>
                        
                        @if (ShowProgressBar)
                        {
                            <div class="flex items-center gap-x-3 whitespace-nowrap">
                                <div class="flex w-full h-2 bg-gray-200 rounded-full overflow-hidden dark:bg-neutral-700" role="progressbar" aria-valuenow="@fileInfo.Progress" aria-valuemin="0" aria-valuemax="100">
                                    <div class="flex flex-col justify-center rounded-full overflow-hidden @(fileInfo.Progress == 100 ? "bg-teal-500" : "bg-blue-600 dark:bg-blue-500") text-xs text-white text-center whitespace-nowrap transition duration-500" style="width: @(fileInfo.Progress)%"></div>
                                </div>
                                <div class="w-6 text-end">
                                    <span class="text-sm text-gray-800 dark:text-white">@(fileInfo.Progress)%</span>
                                </div>
                            </div>
                        }
                    </div>
                }
            </div>
        }
    </EditForm>
</div>

@code {
    [Parameter] public string Label { get; set; } = "Escolher arquivo";
    [Parameter] public bool AllowMultiple { get; set; }
    [Parameter] public string AcceptedFileTypes { get; set; } = "";
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public bool ShowSelectedFiles { get; set; } = true;
    [Parameter] public bool ShowProgressBar { get; set; } = true;
    [Parameter] public long MaxFileSize { get; set; } = 10 * 1024 * 1024; // 10 MB
    [Parameter] public EventCallback<IBrowserFile[]> OnFilesSelected { get; set; }
    [Parameter] public EventCallback<string> OnError { get; set; }
    [Parameter] public EventCallback<IBrowserFile> OnFileRemoved { get; set; }
    [Parameter] public EventCallback<IBrowserFile> OnUploadPaused { get; set; }

    // CSS Classes Parameters
    [Parameter] public string ContainerClass { get; set; } = "max-w-sm";
    [Parameter] public string LabelClass { get; set; } = "sr-only";
    [Parameter] public string InputClass { get; set; } = DefaultInputClass;
    [Parameter] public string ErrorClass { get; set; } = "mt-2 text-sm text-red-600 dark:text-red-400";
    [Parameter] public string SelectedFilesClass { get; set; } = "mt-2";

    // Button styling parameters
    [Parameter] public string ButtonColor { get; set; } = "blue";
    [Parameter] public string ButtonSize { get; set; } = "default";

    private IBrowserFile[]? _selectedFiles;
    private string _errorMessage = "";
    private readonly Dictionary<string, FileUploadInfo> _fileInfos = new();

    public class FileUploadInfo
    {
        public int Progress { get; set; }
        public bool IsPaused { get; set; }
        public bool IsCompleted { get; set; }
    }

    private static string DefaultInputClass => @"block w-full text-sm text-gray-500
        file:me-4 file:py-2 file:px-4
        file:rounded-lg file:border-0
        file:text-sm file:font-semibold
        file:bg-blue-600 file:text-white
        hover:file:bg-blue-700
        file:disabled:opacity-50 file:disabled:pointer-events-none
        dark:text-neutral-500
        dark:file:bg-blue-500
        dark:hover:file:bg-blue-400";

    protected override void OnParametersSet()
    {
        if (!string.IsNullOrEmpty(ButtonColor) && ButtonColor != "blue")
            InputClass = GenerateInputClassWithColor(ButtonColor);
        
        if (!string.IsNullOrEmpty(ButtonSize) && ButtonSize != "default")
            InputClass = GenerateInputClassWithSize(ButtonSize);
    }

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        _errorMessage = "";
        
        try
        {
            var files = e.GetMultipleFiles(AllowMultiple ? int.MaxValue : 1);
            var validFiles = new List<IBrowserFile>();

            foreach (var file in files)
            {
                if (file.Size > MaxFileSize)
                {
                    _errorMessage = $"O arquivo '{file.Name}' excede o tamanho máximo permitido de {FormatFileSize(MaxFileSize)}.";
                    await OnError.InvokeAsync(_errorMessage);
                    continue;
                }
                validFiles.Add(file);
            }

            if (validFiles.Any())
            {
                _selectedFiles = validFiles.ToArray();
                await OnFilesSelected.InvokeAsync(_selectedFiles);
            }
        }
        catch (Exception ex)
        {
            _errorMessage = $"Erro ao selecionar arquivos: {ex.Message}";
            await OnError.InvokeAsync(_errorMessage);
        }

        StateHasChanged();
    }

    private string GenerateInputClassWithColor(string color)
    {
        var colorMap = new Dictionary<string, (string bg, string hover, string darkBg, string darkHover)>
        {
            ["red"] = ("bg-red-600", "hover:file:bg-red-700", "dark:file:bg-red-500", "dark:hover:file:bg-red-400"),
            ["green"] = ("bg-green-600", "hover:file:bg-green-700", "dark:file:bg-green-500", "dark:hover:file:bg-green-400"),
            ["purple"] = ("bg-purple-600", "hover:file:bg-purple-700", "dark:file:bg-purple-500", "dark:hover:file:bg-purple-400"),
            ["gray"] = ("bg-gray-600", "hover:file:bg-gray-700", "dark:file:bg-gray-500", "dark:hover:file:bg-gray-400"),
            ["indigo"] = ("bg-indigo-600", "hover:file:bg-indigo-700", "dark:file:bg-indigo-500", "dark:hover:file:bg-indigo-400")
        };

        if (colorMap.TryGetValue(color, out var colors))
        {
            return $@"block w-full text-sm text-gray-500
                file:me-4 file:py-2 file:px-4
                file:rounded-lg file:border-0
                file:text-sm file:font-semibold
                file:{colors.bg} file:text-white
                {colors.hover}
                file:disabled:opacity-50 file:disabled:pointer-events-none
                dark:text-neutral-500
                {colors.darkBg}
                {colors.darkHover}";
        }

        return DefaultInputClass;
    }

    private string GenerateInputClassWithSize(string size)
    {
        var sizeMap = new Dictionary<string, (string padding, string text)>
        {
            ["small"] = ("file:py-1 file:px-2", "file:text-xs"),
            ["large"] = ("file:py-3 file:px-6", "file:text-base"),
            ["xl"] = ("file:py-4 file:px-8", "file:text-lg")
        };

        if (sizeMap.TryGetValue(size, out var sizeClasses))
        {
            return InputClass
                .Replace("file:py-2 file:px-4", sizeClasses.padding)
                .Replace("file:text-sm", sizeClasses.text);
        }

        return InputClass;
    }

    private static string FormatFileSize(long bytes)
    {
        string[] suffixes = ["B", "KB", "MB", "GB", "TB"];
        int counter = 0;
        decimal number = bytes;
        
        while (Math.Round(number / 1024) >= 1)
        {
            number /= 1024;
            counter++;
        }
        
        return $"{number:n1} {suffixes[counter]}";
    }

    private FileUploadInfo GetFileInfo(IBrowserFile file)
    {
        var key = $"{file.Name}_{file.Size}";
        if (!_fileInfos.ContainsKey(key))
        {
            _fileInfos[key] = new FileUploadInfo();
        }
        return _fileInfos[key];
    }

    public void SetFileProgress(IBrowserFile file, int progress)
    {
        var fileInfo = GetFileInfo(file);
        fileInfo.Progress = Math.Max(0, Math.Min(100, progress));
        fileInfo.IsCompleted = progress >= 100;
        StateHasChanged();
    }

    public void SetFileProgress(string fileName, long fileSize, int progress)
    {
        var key = $"{fileName}_{fileSize}";
        if (_fileInfos.ContainsKey(key))
        {
            _fileInfos[key].Progress = Math.Max(0, Math.Min(100, progress));
            _fileInfos[key].IsCompleted = progress >= 100;
            StateHasChanged();
        }
    }

    private async Task RemoveFile(IBrowserFile file)
    {
        if (_selectedFiles != null)
        {
            var fileList = _selectedFiles.ToList();
            fileList.Remove(file);
            _selectedFiles = fileList.ToArray();
            
            var key = $"{file.Name}_{file.Size}";
            _fileInfos.Remove(key);
            
            await OnFileRemoved.InvokeAsync(file);
            StateHasChanged();
        }
    }

    private async Task PauseUpload(IBrowserFile file)
    {
        var fileInfo = GetFileInfo(file);
        fileInfo.IsPaused = !fileInfo.IsPaused;
        await OnUploadPaused.InvokeAsync(file);
        StateHasChanged();
    }

    private string GetFileIcon(IBrowserFile file)
    {
        var extension = Path.GetExtension(file.Name).ToLowerInvariant();
        
        return extension switch
        {
            ".xls" or ".xlsx" => @"<svg class=""shrink-0 size-5"" width=""24"" height=""24"" viewBox=""0 0 24 24"" fill=""none"" xmlns=""http://www.w3.org/2000/svg"">
                <path d=""M15.0243 1.43996H7.08805C6.82501 1.43996 6.57277 1.54445 6.38677 1.73043C6.20077 1.91642 6.09631 2.16868 6.09631 2.43171V6.64796L15.0243 11.856L19.4883 13.7398L23.9523 11.856V6.64796L15.0243 1.43996Z"" fill=""#21A366""></path>
                <path d=""M6.09631 6.64796H15.0243V11.856H6.09631V6.64796Z"" fill=""#107C41""></path>
                <path d=""M22.9605 1.43996H15.0243V6.64796H23.9523V2.43171C23.9523 2.16868 23.8478 1.91642 23.6618 1.73043C23.4758 1.54445 23.2235 1.43996 22.9605 1.43996Z"" fill=""#33C481""></path>
                <path d=""M15.0243 11.856H6.09631V21.2802C6.09631 21.5433 6.20077 21.7955 6.38677 21.9815C6.57277 22.1675 6.82501 22.272 7.08805 22.272H22.9606C23.2236 22.272 23.4759 22.1675 23.6618 21.9815C23.8478 21.7955 23.9523 21.5433 23.9523 21.2802V17.064L15.0243 11.856Z"" fill=""#185C37""></path>
                <path d=""M15.0243 11.856H23.9523V17.064H15.0243V11.856Z"" fill=""#107C41""></path>
                <path opacity=""0.1"" d=""M12.5446 5.15996H6.09631V19.296H12.5446C12.8073 19.2952 13.0591 19.1904 13.245 19.0046C13.4308 18.8188 13.5355 18.567 13.5363 18.3042V6.1517C13.5355 5.88892 13.4308 5.63712 13.245 5.4513C13.0591 5.26548 12.8073 5.16074 12.5446 5.15996Z"" fill=""black""></path>
                <path opacity=""0.2"" d=""M11.8006 5.90396H6.09631V20.04H11.8006C12.0633 20.0392 12.3151 19.9344 12.501 19.7486C12.6868 19.5628 12.7915 19.311 12.7923 19.0482V6.8957C12.7915 6.6329 12.6868 6.38114 12.501 6.19532C12.3151 6.0095 12.0633 5.90475 11.8006 5.90396Z"" fill=""black""></path>
                <path opacity=""0.2"" d=""M11.8006 5.90396H6.09631V18.552H11.8006C12.0633 18.5512 12.3151 18.4464 12.501 18.2606C12.6868 18.0748 12.7915 17.823 12.7923 17.5602V6.8957C12.7915 6.6329 12.6868 6.38114 12.501 6.19532C12.3151 6.0095 12.0633 5.90475 11.8006 5.90396Z"" fill=""black""></path>
                <path opacity=""0.2"" d=""M11.0566 5.90396H6.09631V18.552H11.0566C11.3193 18.5512 11.5711 18.4464 11.757 18.2606C11.9428 18.0748 12.0475 17.823 12.0483 17.5602V6.8957C12.0475 6.6329 11.9428 6.38114 11.757 6.19532C11.5711 6.0095 11.3193 5.90475 11.0566 5.90396Z"" fill=""black""></path>
                <path d=""M1.13604 5.90396H11.0566C11.3195 5.90396 11.5718 6.00842 11.7578 6.19442C11.9438 6.38042 12.0483 6.63266 12.0483 6.8957V16.8162C12.0483 17.0793 11.9438 17.3315 11.7578 17.5175C11.5718 17.7035 11.3195 17.808 11.0566 17.808H1.13604C0.873012 17.808 0.620754 17.7035 0.434765 17.5175C0.248775 17.3315 0.144287 17.0793 0.144287 16.8162V6.8957C0.144287 6.63266 0.248775 6.38042 0.434765 6.19442C0.620754 6.00842 0.873012 5.90396 1.13604 5.90396Z"" fill=""#107C41""></path>
                <path d=""M2.77283 15.576L5.18041 11.8455L2.9752 8.13596H4.74964L5.95343 10.5071C6.06401 10.7318 6.14015 10.8994 6.18185 11.01H6.19745C6.27683 10.8305 6.35987 10.6559 6.44669 10.4863L7.73309 8.13596H9.36167L7.09991 11.8247L9.41897 15.576H7.68545L6.29489 12.972C6.22943 12.861 6.17387 12.7445 6.12899 12.6238H6.10817C6.06761 12.7419 6.01367 12.855 5.94748 12.9608L4.51676 15.576H2.77283Z"" fill=""white""></path>
            </svg>",
            ".doc" or ".docx" => @"<svg class=""shrink-0 size-5"" xmlns=""http://www.w3.org/2000/svg"" width=""24"" height=""24"" viewBox=""0 0 24 24"" fill=""none"" stroke=""currentColor"" stroke-width=""2"" stroke-linecap=""round"" stroke-linejoin=""round""><path d=""M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z""/><polyline points=""14,2 14,8 20,8""/><line x1=""16"" x2=""8"" y1=""13"" y2=""13""/><line x1=""16"" x2=""8"" y1=""17"" y2=""17""/><polyline points=""10,9 9,9 8,9""/></svg>",
            ".pdf" => @"<svg class=""shrink-0 size-5"" xmlns=""http://www.w3.org/2000/svg"" width=""24"" height=""24"" viewBox=""0 0 24 24"" fill=""none"" stroke=""currentColor"" stroke-width=""2"" stroke-linecap=""round"" stroke-linejoin=""round""><path d=""M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z""/><polyline points=""14,2 14,8 20,8""/></svg>",
            ".jpg" or ".jpeg" or ".png" or ".gif" or ".bmp" or ".webp" => @"<svg class=""shrink-0 size-5"" xmlns=""http://www.w3.org/2000/svg"" width=""24"" height=""24"" viewBox=""0 0 24 24"" fill=""none"" stroke=""currentColor"" stroke-width=""2"" stroke-linecap=""round"" stroke-linejoin=""round""><rect width=""18"" height=""18"" x=""3"" y=""3"" rx=""2"" ry=""2""/><circle cx=""9"" cy=""9"" r=""2""/><path d=""m21 15-3.086-3.086a2 2 0 0 0-2.828 0L6 21""/></svg>",
            _ => @"<svg class=""shrink-0 size-5"" xmlns=""http://www.w3.org/2000/svg"" width=""24"" height=""24"" viewBox=""0 0 24 24"" fill=""none"" stroke=""currentColor"" stroke-width=""2"" stroke-linecap=""round"" stroke-linejoin=""round""><path d=""M14.5 2H6a2 2 0 0 0-2 2v16a2 2 0 0 0 2 2h12a2 2 0 0 0 2-2V7.5L14.5 2z""/><polyline points=""14,2 14,8 20,8""/></svg>"
        };
    }

    public void ClearSelection()
    {
        _selectedFiles = null;
        _errorMessage = "";
        _fileInfos.Clear();
        StateHasChanged();
    }

    public IBrowserFile[] GetSelectedFiles()
    {
        return _selectedFiles ?? [];
    }
}