using SixLabors.ImageSharp;
using SixLabors.ImageSharp.PixelFormats;

namespace WaxMapArt.ImageProcessing.Dithering;

public class BayerOrderedDithering(WaxMatrix matrix)
    : IWaxDithering
{
    #region Matrix
    public static WaxMatrix Bayer4X4 = new(new[,] {
        {    -.5f,       0,  -.375f,   .125f },
        {    .25f,   -.25f,   .375f, - .125f },
        { -.3125f,  .1875f, -.4375f,  .0625f },
        {  .4375f, -.0625f,  .3125f, -.1875f }
    }, 4);

    public static WaxMatrix Bayer8X8 = new(new[,] {
        { -0.5f, 0f, -0.375f, 0.125f, -0.46875f, 0.03125f, -0.34375f, 0.15625f },
        { 0.25f, -0.25f, 0.375f, -0.125f, 0.28125f, -0.21875f, 0.40625f, -0.09375f },
        { -0.3125f, 0.1875f, -0.4375f, 0.0625f, -0.28125f, 0.21875f, -0.40625f, 0.09375f },
        { 0.4375f, -0.0625f, 0.3125f, -0.1875f, 0.46875f, -0.03125f, 0.34375f, -0.15625f },
        { -0.453125f, 0.046875f, -0.328125f, 0.171875f, -0.484375f, 0.015625f, -0.359375f, 0.140625f },
        { 0.296875f, -0.203125f, 0.421875f, -0.078125f, 0.265625f, -0.234375f, 0.390625f, -0.109375f },
        { -0.265625f, 0.234375f, -0.390625f, 0.109375f, -0.296875f, 0.203125f, -0.421875f, 0.078125f },
        { 0.484375f, -0.015625f, 0.359375f, -0.140625f, 0.453125f, -0.046875f, 0.328125f, -0.171875f }
    }, 8);
    
    public static WaxMatrix Bayer16X16 = new(new[,] {
        { -0.5f, 0.25f, -0.3125f, 0.4375f, -0.453125f, 0.296875f, -0.265625f, 0.484375f, -0.4882813f, 0.2617188f, -0.3007813f, 0.4492188f, -0.4414063f, 0.3085938f, -0.2539063f, 0.4960938f },
        { 0f, -0.25f, 0.1875f, -0.0625f, 0.046875f, -0.203125f, 0.234375f, -0.015625f, 0.01171875f, -0.2382813f, 0.1992188f, -0.05078125f, 0.05859375f, -0.1914063f, 0.2460938f, -0.00390625f },
        { -0.375f, 0.375f, -0.4375f, 0.3125f, -0.328125f, 0.421875f, -0.390625f, 0.359375f, -0.3632813f, 0.3867188f, -0.4257813f, 0.3242188f, -0.3164063f, 0.4335938f, -0.3789063f, 0.3710938f },
        { 0.125f, -0.125f, 0.0625f, -0.1875f, 0.171875f, -0.078125f, 0.109375f, -0.140625f, 0.1367188f, -0.1132813f, 0.07421875f, -0.1757813f, 0.1835938f, -0.06640625f, 0.1210938f, -0.1289063f },
        { -0.46875f, 0.28125f, -0.28125f, 0.46875f, -0.484375f, 0.265625f, -0.296875f, 0.453125f, -0.4570313f, 0.2929688f, -0.2695313f, 0.4804688f, -0.4726563f, 0.2773438f, -0.2851563f, 0.4648438f },
        { 0.03125f, -0.21875f, 0.21875f, -0.03125f, 0.015625f, -0.234375f, 0.203125f, -0.046875f, 0.04296875f, -0.2070313f, 0.2304688f, -0.01953125f, 0.02734375f, -0.2226563f, 0.2148438f, -0.03515625f },
        { -0.34375f, 0.40625f, -0.40625f, 0.34375f, -0.359375f, 0.390625f, -0.421875f, 0.328125f, -0.3320313f, 0.4179688f, -0.3945313f, 0.3554688f, -0.3476563f, 0.4023438f, -0.4101563f, 0.3398438f },
        { 0.15625f, -0.09375f, 0.09375f, -0.15625f, 0.140625f, -0.109375f, 0.078125f, -0.171875f, 0.1679688f, -0.08203125f, 0.1054688f, -0.1445313f, 0.1523438f, -0.09765625f, 0.08984375f, -0.1601563f },
        { -0.4921875f, 0.2578125f, -0.3046875f, 0.4453125f, -0.4453125f, 0.3046875f, -0.2578125f, 0.4921875f, -0.4960938f, 0.2539063f, -0.3085938f, 0.4414063f, -0.4492188f, 0.3007813f, -0.2617188f, 0.4882813f },
        { 0.0078125f, -0.2421875f, 0.1953125f, -0.0546875f, 0.0546875f, -0.1953125f, 0.2421875f, -0.0078125f, 0.00390625f, -0.2460938f, 0.1914063f, -0.05859375f, 0.05078125f, -0.1992188f, 0.2382813f, -0.01171875f },
        { -0.3671875f, 0.3828125f, -0.4296875f, 0.3203125f, -0.3203125f, 0.4296875f, -0.3828125f, 0.3671875f, -0.3710938f, 0.3789063f, -0.4335938f, 0.3164063f, -0.3242188f, 0.4257813f, -0.3867188f, 0.3632813f },
        { 0.1328125f, -0.1171875f, 0.0703125f, -0.1796875f, 0.1796875f, -0.0703125f, 0.1171875f, -0.1328125f, 0.1289063f, -0.1210938f, 0.06640625f, -0.1835938f, 0.1757813f, -0.07421875f, 0.1132813f, -0.1367188f },
        { -0.4609375f, 0.2890625f, -0.2734375f, 0.4765625f, -0.4765625f, 0.2734375f, -0.2890625f, 0.4609375f, -0.4648438f, 0.2851563f, -0.2773438f, 0.4726563f, -0.4804688f, 0.2695313f, -0.2929688f, 0.4570313f },
        { 0.0390625f, -0.2109375f, 0.2265625f, -0.0234375f, 0.0234375f, -0.2265625f, 0.2109375f, -0.0390625f, 0.03515625f, -0.2148438f, 0.2226563f, -0.02734375f, 0.01953125f, -0.2304688f, 0.2070313f, -0.04296875f },
        { -0.3359375f, 0.4140625f, -0.3984375f, 0.3515625f, -0.3515625f, 0.3984375f, -0.4140625f, 0.3359375f, -0.3398438f, 0.4101563f, -0.4023438f, 0.3476563f, -0.3554688f, 0.3945313f, -0.4179688f, 0.3320313f },
        { 0.1640625f, -0.0859375f, 0.1015625f, -0.1484375f, 0.1484375f, -0.1015625f, 0.0859375f, -0.1640625f, 0.1601563f, -0.08984375f, 0.09765625f, -0.1523438f, 0.1445313f, -0.1054688f, 0.08203125f, -0.1679688f }
    }, 16);
    #endregion

    private WaxColor DitherPixel(int x, int y, WaxColor color, List<WaxColor> palette, ComparisonMethod comparisonMethod)
    {
        float mapValue = matrix.Matrix[x % matrix.Size, y % matrix.Size];

        byte r = (byte)(color.R + mapValue);
        byte g = (byte)(color.G + mapValue);
        byte b = (byte)(color.B + mapValue);

        return new WaxColor(r, g, b).Nearest(palette, comparisonMethod);
    }

    public void ApplyDither(ref Image<Rgb24> image, List<WaxColor> palette, ComparisonMethod comparisonMethod)
    {
        for(int x = 0; x < image.Width; x++)
        for (int y = 0; y < image.Height; y++)
        {
            var color = WaxColor.FromRgb24(image[x, y]);
            image[x, y] = DitherPixel(x, y, color, palette, comparisonMethod).ToRgb24();
        }
    }
}

public record struct WaxMatrix(float[,] Matrix, int Size);