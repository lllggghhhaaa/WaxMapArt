@page "/"
@using System.Text
@using Newtonsoft.Json
@using SixLabors.ImageSharp
@using SixLabors.ImageSharp.PixelFormats
@using WaxMapArt.ImageProcessing.Dithering
@using Palette = WaxMapArt.Palette
@using Color = MudBlazor.Color
@inject ISnackbar Snackbar

<PageTitle>Index</PageTitle>

<MudNumericField @bind-Value="_mapWidth" Label="Width" Min="1" Variant="Variant.Outlined" Step="1" />
<MudNumericField @bind-Value="_mapHeight" Label="Height" Min="1" Variant="Variant.Outlined" Step="1" />

<MudSelect T="GeneratorType" @bind-Value="@_generatorType" Label="Generator Type" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
    @foreach (var gt in Enum.GetValues<GeneratorType>())
    {
    <MudSelectItem Value="gt"/>
    }
</MudSelect>

<MudSelect T="ComparisonMethod" @bind-Value="@_comparisonMethod" Label="Comparison Method" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
    @foreach (var cm in Enum.GetValues<ComparisonMethod>())
    {
        <MudSelectItem Value="cm"/>
    }
</MudSelect>

<MudSelect T="DitheringType" @bind-Value="@_ditheringType" Label="Dithering" Variant="Variant.Outlined" AnchorOrigin="Origin.BottomCenter">
    @foreach (var dt in Enum.GetValues<DitheringType>())
    {
        <MudSelectItem Value="dt"/>
    }
</MudSelect>

<MudDivider DividerType="DividerType.Middle" />

<MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
    <ActivatorContent>
        <MudButton Variant="Variant.Filled"
                   Color="Color.Primary"
                   StartIcon="@Icons.Material.Filled.CloudUpload">
            AppendMultipleFiles = true
        </MudButton>
    </ActivatorContent>
</MudFileUpload>

<MudDivider DividerType="DividerType.Middle" />

<MudImage Width="@(256 * _mapWidth)" Height="@(256 * _mapHeight)" ObjectFit="ObjectFit.ScaleDown" Src="@_originalImageUrl" Class="rounded-lg"/>
<MudImage Width="@(256 * _mapWidth)" Height="@(256 * _mapHeight)" ObjectFit="ObjectFit.ScaleDown" Src="@_previewImageUrl" Class="rounded-lg"/>

<MudDivider DividerType="DividerType.Middle" />

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="PreviewClick">Preview</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Secondary" OnClick="GenerateClick">Generate</MudButton>

<MudText Typo="Typo.body1">@_resume</MudText>

@code {
    private Image<Rgb24>? _originalImage;
    private GeneratorType _generatorType;
    private ComparisonMethod _comparisonMethod;
    private DitheringType _ditheringType;

    private int _mapWidth = 1;
    private int _mapHeight = 1;

    private string? _originalImageUrl;
    private string? _previewImageUrl;

    private string _resume = String.Empty;
    
    private async void UploadFiles(IBrowserFile? file)
    {
        if (file is null) return;
        using var ms = new MemoryStream();
        await file.OpenReadStream().CopyToAsync(ms);
        ms.Seek(0, SeekOrigin.Begin);
        _originalImage = await Image.LoadAsync<Rgb24>(ms);

        _originalImageUrl = ImageToUrl(ms);
        
        StateHasChanged();
    }
    
    private string ImageToUrl(MemoryStream ms)
    {
        ms.Seek(0, SeekOrigin.Begin);
        byte[] byteArray = ms.ToArray();
        return "data:image/png;base64," + Convert.ToBase64String(byteArray);
    }

    private async void PreviewClick()
    {
        if (_originalImage is null) return;

        using var http = new HttpClient();
        string rawPalette = await http.GetStringAsync("https://raw.githubusercontent.com/lllggghhhaaa/WaxMapArt/master/WaxMapArt/palette.json");
        
        var palette = JsonConvert.DeserializeObject<Palette>(rawPalette);
        
        var preview = new Preview(palette)
        {
            Dithering = _ditheringType,
            Method = _comparisonMethod,
            OutputSize = new WaxSize(256 * _mapWidth, 256 * _mapHeight),
            MapSize = new WaxSize(_mapWidth, _mapHeight)
        };

        var output = _generatorType switch
        {
            GeneratorType.Flat => preview.GeneratePreviewFlat(_originalImage),
            GeneratorType.Staircase => preview.GeneratePreviewStaircase(_originalImage),
            _ => throw new ArgumentOutOfRangeException()
        };

        var sb = new StringBuilder();
        
        foreach (var (info, amount) in output.BlockList)
            sb.Append($"{info.BlockId} x{amount}\n");

        _resume = sb.ToString();
        
        using var ms = new MemoryStream();
        await output.Image.SaveAsPngAsync(ms);
        _previewImageUrl = ImageToUrl(ms);
        
        StateHasChanged();
    }

    private async void GenerateClick()
    {
        if (_originalImage is null) return;

        using var http = new HttpClient();
        string rawPalette = await http.GetStringAsync("https://raw.githubusercontent.com/lllggghhhaaa/WaxMapArt/master/WaxMapArt/palette.json");
        
        var palette = JsonConvert.DeserializeObject<Palette>(rawPalette);

        var generator = new Generator(palette)
        {
            Dithering = _ditheringType,
            Method = _comparisonMethod,
            OutputSize = new WaxSize(256 * _mapWidth, 256 * _mapHeight),
            MapSize = new WaxSize(_mapWidth, _mapWidth)
        };

        var output = _generatorType switch
        {
            GeneratorType.Flat => generator.GenerateFlat(_originalImage),
            GeneratorType.Staircase => generator.GenerateStaircase(_originalImage),
            _ => throw new ArgumentOutOfRangeException()
        };

        var sb = new StringBuilder();
        
        foreach (var (info, amount) in output.CountBlocks())
            sb.Append($"{info.BlockId} x{amount}\n");

        _resume = sb.ToString();
        
        using var ms = new MemoryStream();
        await output.Image.SaveAsPngAsync(ms);
        _previewImageUrl = ImageToUrl(ms);

        Stream stream = NbtGenerator.Generate(output.Blocks);
        await using FileStream fs = File.Create("schematic.nbt");
        await stream.CopyToAsync(fs);

        stream.Close();
        fs.Close();

        Snackbar.Add($"File saved to {Path.GetFullPath("schematic.nbt")}");
        
        StateHasChanged();
    }

    enum GeneratorType
    {
        Flat,
        Staircase
    }
}

